//
// Auto-generated by dnne-gen
//
// .NET Assembly: PF.VsxProtocolDriver.Wrapper
//

//
// Declare exported functions
//
#ifndef __DNNE_GENERATED_HEADER_PF_VSXPROTOCOLDRIVER_WRAPPER__
#define __DNNE_GENERATED_HEADER_PF_VSXPROTOCOLDRIVER_WRAPPER__

#include <stddef.h>
#include <stdint.h>
//#include <dnne.h>
#include "dnne.h"

//
// Additional code provided by user
//

/// Helper function to allow (really) old compiler running code
/// The 64bit support for the old compiler is splitted into two variables.
/// Signed values will be splitted unsigned values. Watch out, when using negative values.
#ifdef _CVI_
typedef struct _big64
        {
            unsigned int x;
            unsigned int y;
        }
        big64;
#define LOCAL_INT64_T big64
typedef struct _unsigned_big64
        {
            unsigned int x;
            unsigned int y;
        }
        unsigned_big64;
#define LOCAL_UINT64_T unsigned_big64
#else
#define LOCAL_INT64_T int64_t
#define LOCAL_UINT64_T uint64_t
#endif

/// The strategy which containers are removed when max number of items is reached.
typedef enum _vsxStrategy
{
  /// Discards the oldest saved item if max number of items is reached.
  VSX_STRATEGY_DROP_OLDEST = 0,
  /// Discards the current item if max number of items is reached.
  VSX_STRATEGY_DROP_WRITE = 1
}
        VsxStrategy;

/// The status code for function calls.
typedef enum _vsxStatusCode {
  /// Success of function call. This one should be used for checking of an error
  VSX_STATUS_SUCCESS = 0,
  VSX_STATUS_ERROR_DRIVER_INIT = -0x1,
  VSX_STATUS_ERROR_DRIVER_TIMEOUT = -0x2,
  VSX_STATUS_ERROR_DRIVER_SAVE_FILE = -0x3,
  VSX_STATUS_ERROR_DRIVER_DATA = -0x4,
  VSX_STATUS_ERROR_DRIVER_CONNECTION = -0x5,
  VSX_STATUS_ERROR_DRIVER_INVALID_DATA = -0x6,
  VSX_STATUS_ERROR_DRIVER_DEVICE = -0x7,
  VSX_STATUS_ERROR_DRIVER_LOAD_FILE = -0x8,
  VSX_STATUS_ERROR_SESSION = -0x9,
  VSX_STATUS_ERROR_STRING = -0x0A,
  VSX_STATUS_ERROR_VERSION = -0x0B,
  VSX_STATUS_ERROR_DRIVER_GENERAL = -0x1000,
  VSX_STATUS_ERROR_UNABLE_TO_ALLOCATE_VSX_SYSTEM = -0x8001,
  VSX_STATUS_ERROR_VSX_SYSTEM_HANDLE_NOT_ZERO = -0x8002,
  VSX_STATUS_ERROR_VSX_SYSTEM_HANDLE_ZERO = -0x8003,
  VSX_STATUS_ERROR_VSX_SYSTEM_HANDLE_NOT_AVAILABLE = -0x8004,
  VSX_STATUS_ERROR_MISSING_IP_ADDRESS_DECLARATION = -0x8005,
  VSX_STATUS_ERROR_MISSING_SERIALPORT_DECLARATION = -0x8006,
  VSX_STATUS_ERROR_VSX_SYSTEM_HANDLE_POINTER_ZERO = -0x8007,
  VSX_STATUS_ERROR_CONFIGURATION_ID_ZERO = -0x8008,
  VSX_STATUS_ERROR_PARAMETER_ID_ZERO = -0x8009,
  VSX_STATUS_ERROR_VALUE_ZERO = -0x800A,
  VSX_STATUS_ERROR_COMMAND_ZERO = -0x800B,
  VSX_STATUS_ERROR_INPUT_VALUE_ZERO = -0x800C,
  VSX_STATUS_ERROR_OUTPUT_VALUE_POINTER_ZERO = -0x800D,
  VSX_STATUS_ERROR_OUTPUT_VALUE_NOT_ZERO = -0x800E,
  VSX_STATUS_ERROR_VALUE_POINTER_ZERO = -0x800F,
  VSX_STATUS_ERROR_VALUE_NOT_ZERO = -0x8010,
  VSX_STATUS_ERROR_UNABLE_TO_FIND_VSX_SYSTEM = -0x8011,
  VSX_STATUS_ERROR_XML_COMMAND_ZERO = -0x8012,
  VSX_STATUS_ERROR_FILENAME_ZERO = -0x8013,
  VSX_STATUS_ERROR_STRING_POINTER_ZERO = -0x8014,
  VSX_STATUS_ERROR_STRING_ZERO = -0x8015,
  VSX_STATUS_ERROR_VSX_DATA_CONTAINER_HANDLE_POINTER_ZERO = -0x8016,
  VSX_STATUS_ERROR_UNABLE_TO_ALLOCATE_VSX_DATA_CONTAINER = -0x8017,
  VSX_STATUS_ERROR_VSX_DATA_CONTAINER_HANDLE_NOT_ZERO = -0x8018,
  VSX_STATUS_ERROR_VSX_DATA_CONTAINER_HANDLE_ZERO = -0x8019,
  VSX_STATUS_ERROR_VSX_DATA_CONTAINER_HANDLE_NOT_AVAILABLE = -0x801A,
  VSX_STATUS_ERROR_IMAGE_TAG_ZERO = -0x801B,
  VSX_STATUS_ERROR_UNABLE_TO_FIND_VSX_DATA_CONTAINER = -0x801C,
  VSX_STATUS_ERROR_UNABLE_TO_FIND_IMAGE_ID_IN_DATA_CONTAINER = -0x801D,
  VSX_STATUS_ERROR_UNABLE_TO_FIND_IMAGE_TAG_TO_DATA_FORMAT = -0x801E,
  VSX_STATUS_ERROR_POINT_Z_ID_ZERO = -0x801F,
  VSX_STATUS_ERROR_POINT_Y_ID_ZERO = -0x8020,
  VSX_STATUS_ERROR_POINT_X_ID_ZERO = -0x8021,
  VSX_STATUS_ERROR_UNABLE_TO_FIND_POINT_X_ID_IN_DATA_CONTAINER = -0x8022,
  VSX_STATUS_ERROR_UNABLE_TO_FIND_POINT_Y_ID_IN_DATA_CONTAINER = -0x8023,
  VSX_STATUS_ERROR_UNABLE_TO_FIND_POINT_Z_ID_IN_DATA_CONTAINER = -0x8024,
  VSX_STATUS_ERROR_UNABLE_TO_FIND_POINT_X_ID_TO_DATA_FORMAT = -0x8025,
  VSX_STATUS_ERROR_UNABLE_TO_FIND_POINT_Y_ID_TO_DATA_FORMAT = -0x8026,
  VSX_STATUS_ERROR_UNABLE_TO_FIND_POINT_Z_ID_TO_DATA_FORMAT = -0x8027,
  VSX_STATUS_ERROR_LOG_POINTER_ZERO = -0x8028,
  VSX_STATUS_ERROR_LOG_NOT_ZERO = -0x8029,
  VSX_STATUS_ERROR_RESULT_NOT_ZERO = -0x802A,
  VSX_STATUS_ERROR_RESULT_POINTER_ZERO = -0x802B,
  VSX_STATUS_ERROR_UNABLE_TO_FIND_RESULT_ID_IN_DATA_CONTAINER = -0x802C,
  VSX_STATUS_ERROR_UNABLE_TO_FIND_RESULT_ID_TO_DATA_FORMAT = -0x802D,
  VSX_STATUS_ERROR_VERSION_POINTER_ZERO = -0x802E,
  VSX_STATUS_ERROR_VERSION_NOT_ZERO = -0x802F,
  VSX_STATUS_ERROR_VSX_IMAGE_POINTER_ZERO = -0x8030,
  VSX_STATUS_ERROR_VSX_IMAGE_NOT_ZERO = -0x8031,
  VSX_STATUS_ERROR_UNDEFINED_STRATEGY_VALUE = -0x8032,
  VSX_STATUS_ERROR_UNDEFINED_CONNECTION_TYPE_VALUE = -0x8033,
  VSX_STATUS_ERROR_XPATH_ZERO = -0x8034,
  VSX_STATUS_ERROR_INVALID_DATA_FORMAT = -0x8035,
  VSX_STATUS_ERROR_NO_ELEMENT_FOUND = -0x8036,
  VSX_STATUS_ERROR_RESULT_TAG_ZERO = -0x8037,
  VSX_STATUS_ERROR_TAG_ZERO = -0x8038,
  VSX_STATUS_ERROR_UNABLE_TO_FIND_TAG_IN_DATA_CONTAINER = -0x8039,
  VSX_STATUS_ERROR_IP_ADDRESS_ZERO = -0x803A,
  VSX_STATUS_ERROR_NETWORK_MASK_ZERO = -0x803B,
  VSX_STATUS_ERROR_GATEWAY_ZERO = -0x803C,
  VSX_STATUS_ERROR_EXCEPTION_THROWN = -0x803D,
  VSX_STATUS_ERROR_VSX_DEVICE_POINTER_ZERO = -0x803E,
  VSX_STATUS_ERROR_VSX_DEVICE_NOT_ZERO = -0x803F,
  VSX_STATUS_ERROR_VSX_IMAGE_ZERO = -0x8040,
  VSX_STATUS_ERROR_VSX_DEVICE_ZERO = -0x8041,
  VSX_STATUS_ERROR_VSX_DEVICE_LIST_POINTER_ZERO = -0x8042,
  VSX_STATUS_ERROR_VSX_DEVICE_LIST_ZERO = -0x8043,
  VSX_STATUS_ERROR_VSX_TAG_LIST_ZERO = -0x8044,
  VSX_STATUS_ERROR_VSX_TAG_LIST_POINTER_ZERO = -0x8045,
  VSX_STATUS_ERROR_VSX_TAG_LIST_NOT_ZERO = -0x8046,
  VSX_STATUS_ERROR_VSX_PARAMETER_LIST_POINTER_ZERO = -0x8047,
  VSX_STATUS_ERROR_VSX_PARAMETER_LIST_ZERO = -0x8048,
  VSX_STATUS_ERROR_VSX_PARAMETER_NOT_ZERO = -0x8049,
  VSX_STATUS_ERROR_VSX_STATUS_ITEM_LIST_POINTER_ZERO = -0x804A,
  VSX_STATUS_ERROR_VSX_STATUS_ITEM_LIST_ZERO = -0x804B,
  VSX_STATUS_ERROR_VSX_STATUS_ITEM_NOT_ZERO = -0x0804C,
  VSX_STATUS_ERROR_ERROR_TEXT_POINTER_ZERO = -0x0804D,
  VSX_STATUS_ERROR_ERROR_TEXT_NOT_ZERO = -0x0804E,
  VSX_STATUS_ERROR_ON_DISCONNECT_CALLBACK_ZERO = -0x0804F,
  VSX_STATUS_ERROR_MAC_ADDRESS_ZERO = -0x08050,
  VSX_STATUS_ERROR_VSX_CACHED_CONTAINER_NOT_FOUND = -0x08051,
  VSX_STATUS_ERROR_VSX_PARAMETER_LIST_NOT_ZERO = -0x08052,
  VSX_STATUS_ERROR_VSX_PARAMETER_POINTER_ZERO = -0x08053,
  VSX_STATUS_ERROR_VSX_PARAMETER_ZERO = -0x08054,
  VSX_STATUS_ERROR_VSX_DISPARITY_DESCRIPTOR2_POINTER_ZERO = -0x08055,
  VSX_STATUS_ERROR_UNABLE_TO_FIND_DISPARITY_DESCRIPTOR2_TAG = -0x08056,
  VSX_STATUS_ERROR_UNABLE_TO_FIND_DISPARITY_DESCRIPTOR2_ID_IN_DATA_CONTAINER = -0x08057,
  VSX_STATUS_ERROR_VSX_DISPARITY_DESCRIPTOR2_NOT_ZERO = -0x08058,
  VSX_STATUS_ERROR_VSX_DISPARITY_DESCRIPTOR2_ZERO = -0x08059,
  VSX_STATUS_ERROR_VSX_TRANSFORMATION_POINTER_ZERO = -0x0805A,
  VSX_STATUS_ERROR_UNABLE_TO_FIND_TRANSFORMATION_ID_IN_DATA_CONTAINER = -0x0805B,
  VSX_STATUS_ERROR_UNABLE_TO_FIND_TRANSFORMATION_TAG = -0x0805C,
  VSX_STATUS_ERROR_VSX_TRANSFORMATION_NOT_ZERO = -0x0805D,
  VSX_STATUS_ERROR_VSX_TRANSFORMATION_ZERO = -0x0805E,
  VSX_STATUS_ERROR_UNABLE_TO_FIND_CAPTURE_INFORMATION_TAG = -0x0805F,
  VSX_STATUS_ERROR_UNABLE_TO_FIND_CAPTURE_INFORMATION_ID_IN_DATA_CONTAINER = -0x08060,
  VSX_STATUS_ERROR_VSX_CAPTURE_INFORMATION_POINTER_ZERO = -0x08061,
  VSX_STATUS_ERROR_VSX_CAPTURE_INFORMATION_NOT_ZERO = -0x08062,
  VSX_STATUS_ERROR_VSX_CAPTURE_INFORMATION_ZERO = -0x08063,
  VSX_STATUS_ERROR_VSX_LINE_DATA_POINTER_ZERO = -0x08064,
  VSX_STATUS_ERROR_LINE_DATA_TAG_ZERO = -0x08065,
  VSX_STATUS_ERROR_UNABLE_TO_FIND_LINE_ID_IN_DATA_CONTAINER = -0x08066,
  VSX_STATUS_ERROR_UNABLE_TO_FIND_LINE_TAG_TO_DATA_FORMAT = -0x08067,
  VSX_STATUS_ERROR_VSX_LINE_NOT_ZERO = -0x08068,
  VSX_STATUS_ERROR_VSX_LINE_DATA_ZERO = -0x08069,
  VSX_STATUS_ERROR_MISSING_LOGIN_PASSWORD = -0x0806A,
  VSX_STATUS_ERROR_MISSING_LOGIN_USERNAME = -0x0806B,
  VSX_STATUS_ERROR_ON_SESSION_MESSAGE_RECEIVED_CALLBACK_ZERO = -0x0806C,
} VsxStatusCode;

/// Defintion of serial connection type
typedef enum _vsxSerialConnectionType {
  VSX_SERIAL_CONNECTION_TYPE_USB_SSI = 0,
  VSX_SERIAL_CONNECTION_TYPE_PROFIBUS = 1,
  VSX_SERIAL_CONNECTION_TYPE_PROFINET = 2,
  VSX_SERIAL_CONNECTION_TYPE_ETHERNET_IP = 3,
  VSX_SERIAL_CONNECTION_TYPE_RS485 = 4,
  VSX_SERIAL_CONNECTION_TYPE_CANOPEN = 5
} VsxSerialConnectionType;


/// Structure to use for sensor instance
typedef struct _VsxSystemHandle
{
  /// Handle to sensor instance
  int handle;
} VsxSystemHandle;


/// status code of dinconnect event
typedef enum _vsxDisconnectEvent {
  VSX_DISCONNECT_EVENT_REMOTE_HOST_CONNECTION_CLOSED = 0,
  VSX_DISCONNECT_EVENT_DISCONNECT_CALLED = 1,
  VSX_DISCONNECT_EVENT_CONNECTION_ERROR = 2
} VsxDisconnectEvent;

/// Callback definition for disconnect event
typedef void (*vsx_OnDisconnect) (int handle, const char* ipAddress, VsxDisconnectEvent disconnectEvent, const char* description);


/// Status type of session message
typedef enum _vsxSessionTypes {
  VSX_SESSION_TYPES_LOGIN_REQUIRED = 0,
  VSX_SESSION_TYPES_INITIAL_PASSWORD_REQUIRED = 1,
  VSX_SESSION_TYPES_LOGIN = 2,
  VSX_SESSION_TYPES_LOGIN_REPLY = 3,
  VSX_SESSION_TYPES_SET_PASSWORD = 4,
  VSX_SESSION_TYPES_SET_PASSWORD_REPLY = 5,
  VSX_SESSION_TYPES_TIMEOUT_ANNOUNCEMENT = 6,
  VSX_SESSION_TYPES_TIMEOUT = 7,
  VSX_SESSION_TYPES_LOGOUT = 8,
  VSX_SESSION_TYPES_LOGOUT_REPLY = 9,
  VSX_SESSION_TYPES_UNKNOWN = 10
} VsxSessionTypes;

/// Callback defition for session message received
typedef void (*vsx_OnSessionMessageReceived) (int handle, VsxSessionTypes sessionType, int timeout);


/// Structure to use for a data container instance
typedef struct _VsxDataContainerHandle
{
  /// Handle to data container instance
  int handle;
} VsxDataContainerHandle;

/// Defintion of multiple image data formats
typedef enum _vsxImageData2Format {
  VSX_IMAGE_DATA2_FORMAT_MONO8 = 17301505,
  VSX_IMAGE_DATA2_FORMAT_CONFIDENCE8 = 17301702,
  VSX_IMAGE_DATA2_FORMAT_MONO12 = 17825797,
  VSX_IMAGE_DATA2_FORMAT_MONO16 = 17825799,
  VSX_IMAGE_DATA2_FORMAT_COORD3D_A16 = 17825974,
  VSX_IMAGE_DATA2_FORMAT_COORD3D_B16 = 17825975,
  VSX_IMAGE_DATA2_FORMAT_COORD3D_C16 = 17825976,
  VSX_IMAGE_DATA2_FORMAT_COORD3D_A32F = 18874557,
  VSX_IMAGE_DATA2_FORMAT_COORD3D_B32F = 18874558,
  VSX_IMAGE_DATA2_FORMAT_COORD3D_C32F = 18874559
} VsxImageData2Format;

/// Declaration of image data
typedef struct _VsxImage{
  void* rawdata;
  VsxImageData2Format format;
  int width;
  int height;
  int linePitch;
  LOCAL_INT64_T frameCounter;
  double coordinateScale;
  double coordinateOffset;
  double axisMin;
  double axisMax;
  double invalidDataValue;
} VsxImage;


/// Defines the components, that could be part of line data
typedef enum _vsxLineDataFormat {
  VSX_LINE_DATA_FORMAT_C = 0x00,
  VSX_LINE_DATA_FORMAT_X = 0x01,
  VSX_LINE_DATA_FORMAT_Y = 0x02,
  VSX_LINE_DATA_FORMAT_Z = 0x04,
  VSX_LINE_DATA_FORMAT_Q = 0x08,
  VSX_LINE_DATA_FORMAT_I = 0x10,
  VSX_LINE_DATA_FORMAT_32BIT_MODE = 0x1000,
} VsxLineDataFormat;

/// Declare coordinate point of line
typedef struct _VsxLineCoordinate{
  /// Image column [px]
  float c;
  /// Position X direction [mm]
  float x;
  /// Position Y direction [mm]
  float y;
  /// Position Z direction [mm]
  float z;
  /// Quality value [0..100%]
  float q;
  /// Intensity [grayvalues]
  float i;
} VsxLineCoordinate;

/// Declare a line package
typedef struct _VsxLineData{
  VsxLineCoordinate** lines;
  unsigned short format;
  unsigned short width;
  unsigned short countLines;
  unsigned short frameCounter;
  float minX;
  float maxX;
  float minZ;
  float maxZ;
} VsxLineData;


/// Disparity descriptor to calculate 3D data from disparity map
typedef struct _VsxDisparityDescriptor2{
  double focalLength;
  double principalPointU;
  double principalPointV;
  double baseline;
  double offsetLeftRectifiedToDisparityU;
  double offsetLeftRectifiedToDisparityV;
} VsxDisparityDescriptor2;


/// Transformation containg translation and quaternion
typedef struct _VsxTransformation{
  double translationTX;
  double translationTY;
  double translationTZ;
  double quaternionQ0;
  double quaternionQ1;
  double quaternionQ2;
  double quaternionQ3;
} VsxTransformation;


/// Contains information about image capture
typedef struct _VsxCaptureInformation{
  LOCAL_UINT64_T triggerCounter;
  LOCAL_UINT64_T parameterId;
  LOCAL_UINT64_T jobId;
  LOCAL_INT64_T rotaryEncoder;
  LOCAL_UINT64_T frameCounter;
  LOCAL_UINT64_T timestamp;
  unsigned int exposureTime;
  unsigned int gain;
  unsigned char illumination;
  unsigned char triggerSource;
} VsxCaptureInformation;


/// List of all possible tags inside a dynamic container
typedef struct _VsxTagList{
  int length;
  const char** tags;
} VsxTagList;


/// Declare device informations
typedef struct _VsxDevice{
  const char* ipAddress;
  const char* networkMask;
  const char* gateway;
  const char* macAddress;
  const char* firmwareVersion;
  const char* sensorType;
  const char* sensorName;
  int busy;
  int deviceVsxVersionMajor;
  int deviceVsxVersionMinor;
  const char* comPort;
  int baudrate;
  const char* headAddress;
  int isLoginNeeded;
} VsxDevice;

/// List of devices
typedef struct _VsxDeviceList{
  int length;
  const VsxDevice* devices;
} VsxDeviceList;


/// Define value type of parameter
typedef enum _vsxParameterValueType {
  VSX_PARAMETER_VALUE_TYPE_BOOL = 0,        ///< Result in 'valueInt'
  VSX_PARAMETER_VALUE_TYPE_INT = 1,         ///< Result in 'valueInt'
  VSX_PARAMETER_VALUE_TYPE_LONG = 2,        ///< Result in 'valueInt'
  VSX_PARAMETER_VALUE_TYPE_UINT = 3,        ///< Result in 'valueInt'
  VSX_PARAMETER_VALUE_TYPE_INT16 = 4,       ///< Result in 'valueInt'
  VSX_PARAMETER_VALUE_TYPE_FLOAT = 5,       ///< Result in 'valueDouble'
  VSX_PARAMETER_VALUE_TYPE_DOUBLE = 6,      ///< Result in 'valueDouble'
  VSX_PARAMETER_VALUE_TYPE_STRING = 7,      ///< Result in 'valueString'
  VSX_PARAMETER_VALUE_TYPE_HEXSTRING = 8,   ///< Result in 'valueString'
  VSX_PARAMETER_VALUE_TYPE_BASE64 = 9,      ///< Result in 'valueString'
  VSX_PARAMETER_VALUE_TYPE_ENUM = 10,       ///< Result in 'valueString'
  VSX_PARAMETER_VALUE_TYPE_IP = 11,         ///< Result in 'valueString'
  VSX_PARAMETER_VALUE_TYPE_RECTANGLE = 12,  ///< Result in 'valueString'
  VSX_PARAMETER_VALUE_TYPE_QUAD = 13,       ///< Result in 'valueString'
  VSX_PARAMETER_VALUE_TYPE_POINT = 14,      ///< Result in 'valueString'
  VSX_PARAMETER_VALUE_TYPE_UNKNOWN = 15
} VsxParameterValueType;

/// Single item of a parameter enum
typedef struct _VsxParameterEnumItem{
  const char* id;
  const char* name;
} VsxParameterEnumItem;

/// Declares parameter
typedef struct _VsxParameter{
  const char* valueString;
  int valueInt;
  double valueDouble;
  VsxParameterValueType valueType;
  const char* name;
  const char* parameterId;
  const char* configId;
  int configVersion;
  int settingsVersion;
  int enumItemListLength;
  const VsxParameterEnumItem* enumItemList;
} VsxParameter;

/// List of parameter
typedef struct _VsxParameterList{
  int length;
  const VsxParameter* parameters;
} VsxParameterList;


/// Value types of status item
typedef enum _vsxStatusItemValueType {
  VSX_STATUS_ITEM_VALUE_TYPE_BOOL = 0,       ///< Result in 'valueInt'
  VSX_STATUS_ITEM_VALUE_TYPE_INT = 1,        ///< Result in 'valueInt'
  VSX_STATUS_ITEM_VALUE_TYPE_LONG = 2,       ///< Result in 'valueInt'
  VSX_STATUS_ITEM_VALUE_TYPE_UINT = 3,       ///< Result in 'valueInt'
  VSX_STATUS_ITEM_VALUE_TYPE_INT16 = 4,      ///< Result in 'valueInt'
  VSX_STATUS_ITEM_VALUE_TYPE_FLOAT = 5,      ///< Result in 'valueDouble'
  VSX_STATUS_ITEM_VALUE_TYPE_DOUBLE = 6,     ///< Result in 'valueDouble'
  VSX_STATUS_ITEM_VALUE_TYPE_STRING = 7,     ///< Result in 'valueString'
  VSX_STATUS_ITEM_VALUE_TYPE_HEXSTRING = 8,  ///< Result in 'valueString'
  VSX_STATUS_ITEM_VALUE_TYPE_BASE64 = 9,     ///< Result in 'valueString'
  VSX_STATUS_ITEM_VALUE_TYPE_ENUM = 10,      ///< Result in 'valueString'
  VSX_STATUS_ITEM_VALUE_TYPE_IP = 11,        ///< Result in 'valueString'
  VSX_STATUS_ITEM_VALUE_TYPE_RECTANGLE = 12, ///< Result in 'valueString'
  VSX_STATUS_ITEM_VALUE_TYPE_QUAD = 13,      ///< Result in 'valueString'
  VSX_STATUS_ITEM_VALUE_TYPE_POINT = 14,     ///< Result in 'valueString'
  VSX_STATUS_ITEM_VALUE_TYPE_UNKNOWN = 15
} VsxStatusItemValueType;

/// Scope of device status
typedef enum _vsxDeviceStatusScope {
  VSX_DEVICE_STATUS_SCOPE_FULL = 0,
  VSX_DEVICE_STATUS_SCOPE_MULTI = 1
} VsxDeviceStatusScope;

/// Declaration of status item
typedef struct _VsxStatusItem{
  const char* valueString;
  int valueInt;
  double valueDouble;
  VsxStatusItemValueType valueType;
  const char* name;
  const char* statusItemId;
  const char* configurationClass;
  int configVersion;
  int settingsVersion;
  LOCAL_UINT64_T time;
  LOCAL_UINT64_T sensorTime;
} VsxStatusItem;

/// List of status items
typedef struct _VsxStatusItemList{
  int length;
  const VsxStatusItem* statusItems;
} VsxStatusItemList;


/// Definition of callback function
typedef void (*vsx_OnDeviceStatusReceived) (int handle, VsxDeviceStatusScope deviceStatusScope, const VsxStatusItemList* statusItemListData);


// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.ReleaseString
/// <summary>
/// Release memory of string allocated by a function before.
/// Sets the pointer to zero.
/// </summary>
/// <param name="pString">Reference to string pointer</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_ReleaseString(const char** pString);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.GetLibraryVersion
/// <summary>
/// Returns the actual library version.
/// PLease free "version" parameter after usage with 'vsx_ReleaseString'
/// </summary>
/// <param name="version">Reference to string pointer</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetLibraryVersion(const char** version);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.GetErrorText
/// <summary>
/// Return the error text to a given error code.
/// It also appends additional text from last error given.
/// </summary>
/// <param name="error_code">Input error code</param>
/// <param name="error_text">Reference to string pointer</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetErrorText(int32_t error_code, const char** error_text);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.InitTcpSensor
/// <summary>
/// Initialize a new tcp based sensor
/// </summary>
/// <param name="pVsx">Reference to an empty vsx system handle</param>
/// <param name="ipAddress">e.g. 192.168.2.4</param>
/// <param name="pluginName">Additional functionality for special sensors.
/// E.g. 'SR3D_STEREO' to calculate 3D data from disparity map on target</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_InitTcpSensor(VsxSystemHandle** pVsx, const char* ipAddress, const char* pluginName);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.InitSerialSensor
/// <summary>
/// Inits an instance to communicate with a Vsx-Device via serial protocol.
/// </summary>
/// <param name="pVsx">New handle to sensor</param>
/// <param name="serialPort">The comport of the device.</param>
/// <param name="baudrate">The baudrate of the device.</param>
/// <param name="sensorType">The sensor type of the device.&gt;</param>
/// <param name="connectionType">The connection type of the device.</param>
/// <param name="pluginName">The type of the device.</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_InitSerialSensor(VsxSystemHandle** pVsx, const char* serialPort, int32_t baudrate, const char* sensorType, VsxSerialConnectionType connectionType, const char* pluginName);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.ReleaseSensor
/// <summary>
/// Frees the given sensor
/// </summary>
/// <param name="vsx">handle to sensor</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_ReleaseSensor(VsxSystemHandle** vsx);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.ReConnectTcpDevice
/// <summary>
/// Disconnects the device and reconnects with new connection settings.
/// </summary>
/// <param name="vsx">handle to sensor</param>
/// <param name="ipAddress">The new IPAddress.</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_ReConnectTcpDevice(VsxSystemHandle* vsx, const char* ipAddress);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.ReConnectAndLoginTcpDevice
/// <summary>
/// Disconnects the device and reconnects with new connection settings and login credentials.
/// </summary>
/// <param name="vsx">handle to sensor</param>
/// <param name="ipAddress">The new IPAddress.</param>
/// <param name="username">username for login</param>
/// <param name="password">password for login</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_ReConnectAndLoginTcpDevice(VsxSystemHandle* vsx, const char* ipAddress, const char* username, const char* password);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.ReConnectSerialDevice
/// <summary>
/// Disconnects the device and reconnects with new connection settings.
/// </summary>
/// <param name="vsx">handle to sensor</param>
/// <param name="serialPort">The new serial port.</param>
/// <param name="baudrate">The new baudrate.</param>
/// <param name="connectionType">The new connection type.</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_ReConnectSerialDevice(VsxSystemHandle* vsx, const char* serialPort, int32_t baudrate, VsxSerialConnectionType connectionType);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.Connect
/// <summary>
/// Connect with the device.
/// </summary>
/// <param name="vsx">handle to sensor</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_Connect(VsxSystemHandle* vsx);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.ConnectEx
/// <summary>
/// Connect with the device.
/// </summary>
/// <param name="vsx">handle to sensor</param>
/// <param name="timeout_ms">The timeout for a connection attempt</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_ConnectEx(VsxSystemHandle* vsx, int32_t timeout_ms);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.ConnectAndLogin
/// <summary>
/// Connect with the device.
/// </summary>
/// <param name="vsx">handle to sensor</param>
/// <param name="username">username for login</param>
/// <param name="password">password for login</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_ConnectAndLogin(VsxSystemHandle* vsx, const char* username, const char* password);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.ConnectExAndLogin
/// <summary>
/// Connect with the device.
/// </summary>
/// <param name="vsx">handle to sensor</param>
/// <param name="username">username for login</param>
/// <param name="password">password for login</param>
/// <param name="timeout_ms">The timeout for a connection attempt</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_ConnectExAndLogin(VsxSystemHandle* vsx, const char* username, const char* password, int32_t timeout_ms);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.Login
/// <summary>
/// Login to the device.
/// </summary>
/// <param name="vsx">handle to sensor</param>
/// <param name="username">username for login</param>
/// <param name="password">password for login</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_Login(VsxSystemHandle* vsx, const char* username, const char* password);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.Logout
/// <summary>
/// Logout from device.
/// </summary>
/// <param name="vsx">handle to sensor</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_Logout(VsxSystemHandle* vsx);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.SetPassword
/// <summary>
/// Set new password on the device.
/// </summary>
/// <param name="vsx">handle to sensor</param>
/// <param name="authorizationUsername">username for authorization account</param>
/// <param name="authorizationPassword">password for authorization account</param>
/// <param name="username">username for account to set new password</param>
/// <param name="password">password for account</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_SetPassword(VsxSystemHandle* vsx, const char* authorizationUsername, const char* authorizationPassword, const char* username, const char* password);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.GetConnected
/// <summary>
/// Indicates current connection state with the device.
/// </summary>
/// <param name="vsx">Handle to sensor</param>
/// <param name="result">Pointer to result value (1: connected, 0: disconneted)</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetConnected(VsxSystemHandle* vsx, int32_t* result);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.Disconnect
/// <summary>
/// Disconnect with the device.
/// </summary>
/// <param name="vsx">handle to sensor</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_Disconnect(VsxSystemHandle* vsx);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.RegisterOnDisconnect
/// <summary>
/// Register callback for "vsx_OnDisconnect" callback.
/// Only short execution times are allowed (do not block the function),
/// just use to transfer data to your (main) thread.
/// </summary>
/// <param name="vsx">Handle to vsx sensor</param>
/// <param name="fptr">Function pointer to callback function</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_RegisterOnDisconnect(VsxSystemHandle* vsx, vsx_OnDisconnect fptr);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.DeregisterOnDisconnect
/// <summary>
/// Function to deregister already existing callback function
/// </summary>
/// <param name="vsx">Handle to sensor</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_DeregisterOnDisconnect(VsxSystemHandle* vsx);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.RegisterOnSessionMessageReceived
/// <summary>
/// Register callback for "vsx_OnSessionMessageReceived" callback.
/// Only short execution times are allowed (do not block the function),
/// just use to transfer data to your (main) thread.
/// </summary>
/// <param name="vsx">Handle to vsx sensor</param>
/// <param name="fptr">Function pointer to callback function</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_RegisterOnSessionMessageReceived(VsxSystemHandle* vsx, vsx_OnSessionMessageReceived fptr);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.DeregisterOnSessionMessageReceived
/// <summary>
/// Function to deregister already existing callback function
/// </summary>
/// <param name="vsx">Handle to sensor</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_DeregisterOnSessionMessageReceived(VsxSystemHandle* vsx);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.TestSystem
/// <summary>
/// Sends a test system command to the device.
/// </summary>
/// <param name="vsx">Handle to sensor</param>
/// <param name="command">The test system command.</param>
/// <param name="inputValue">Optional input value</param>
/// <param name="outputValue">Return ouput string of function call</param>
/// <param name="status">Returns 1 on sucess and 0 on failure</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_TestSystem(VsxSystemHandle* vsx, const char* command, const char* inputValue, const char** outputValue, int32_t* status);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.TestSystemEx
/// <summary>
/// Sends a test system command to the device.
/// </summary>
/// <param name="vsx">Handle to sensor</param>
/// <param name="command">The test system command.</param>
/// <param name="inputValue">Optional input value</param>
/// <param name="outputValue">Return ouput string of function call</param>
/// <param name="status">Returns 1 on sucess and 0 on failure</param>
/// <param name="timeout_ms">Wait time for device reply.</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_TestSystemEx(VsxSystemHandle* vsx, const char* command, const char* inputValue, const char** outputValue, int32_t* status, int32_t timeout_ms);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.GetWaitTimeout
/// <summary>
/// Gets the time in ms, the driver waits for response from device.
/// </summary>
/// <param name="vsx">Handle to sensor</param>
/// <param name="timeout_ms">Time in ms</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetWaitTimeout(VsxSystemHandle* vsx, int32_t* timeout_ms);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.SetWaitTimeout
/// <summary>
/// Sets the time in ms, the driver waits for response from device.
/// </summary>
/// <param name="vsx">Handle to sensor</param>
/// <param name="timeout_ms">Time in ms</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_SetWaitTimeout(VsxSystemHandle* vsx, int32_t timeout_ms);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.UploadData
/// <summary>
/// Sends a data file (either image data or dynamic container data) to the device.
/// </summary>
/// <param name="vsx">Handle to sensor</param>
/// <param name="fileName">The path and filename of the data file.</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_UploadData(VsxSystemHandle* vsx, const char* fileName);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.SendFirmware
/// <summary>
/// Sends a firmware update file to the device. NOTE: not completely implemented
/// yet, the file is send only to the device.
/// </summary>
/// <param name="vsx">Handle to sensor</param>
/// <param name="fileName">The path and filename of the firmware file.</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_SendFirmware(VsxSystemHandle* vsx, const char* fileName);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.SendXmlDataMessage
/// <summary>
/// Sends a string to the device.
/// NOTE: function does not wait for any device reply.
/// </summary>
/// <param name="vsx">Handle to sensor</param>
/// <param name="xmlCommand">Command to send</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_SendXmlDataMessage(VsxSystemHandle* vsx, const char* xmlCommand);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.SetNetworkSettings
/// <summary>
/// Sets the network settings of the device.
/// </summary>
/// <param name="vsx">Handle to sensor</param>
/// <param name="ipAddress">The new IP Address</param>
/// <param name="networkMask">The new network mask</param>
/// <param name="gateway">The new gateway</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_SetNetworkSettings(VsxSystemHandle* vsx, const char* ipAddress, const char* networkMask, const char* gateway);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.SetNetworkSettingsViaUdp
/// <summary>
/// Sets the network settings of the device identified by the macAddress via UDP.
/// </summary>
/// <param name="macAddress">The macAddress of the device to set</param>
/// <param name="ipAddress">The new IP Address</param>
/// <param name="networkMask">The new network mask</param>
/// <param name="gateway">The new gateway</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_SetNetworkSettingsViaUdp(const char* macAddress, const char* ipAddress, const char* networkMask, const char* gateway);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDataContainer.ResetDynamicContainerGrabber
/// <summary>
/// Restarts the internal dynamic container grabber. Saving the items will be new initialized.
/// </summary>
/// <param name="vsx">Handle to sensor</param>
/// <param name="bufferSize">The maximum number of items which will be internally saved, if less than 0, number is infinity.</param>
/// <param name="strategy">The strategy, which items will be discarded if maximum number of items is reached.</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_ResetDynamicContainerGrabber(VsxSystemHandle* vsx, int32_t bufferSize, VsxStrategy strategy);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDataContainer.GetDataContainer
/// <summary>
/// Gets the oldest saved item and removes it internally.
/// </summary>
/// <param name="vsx">Handle to sensor</param>
/// <param name="pDch">New dynamic container handle</param>
/// <param name="timeout_ms">The maximum time in ms to try reading an item.</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetDataContainer(VsxSystemHandle* vsx, VsxDataContainerHandle** pDch, int32_t timeout_ms);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDataContainer.GetCachedContainer
/// <summary>
/// Gets a cached dynamic container.
/// </summary>
/// <param name="vsx">Handle to sensor</param>
/// <param name="pDch">Handle to new generated data container</param>
/// <param name="position">Position of the container in cache.</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetCachedContainer(VsxSystemHandle* vsx, VsxDataContainerHandle** pDch, int32_t position);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDataContainer.ReleaseDataContainer
/// <summary>
/// Release / Free data container
/// </summary>
/// <param name="dch">Handle to data container</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_ReleaseDataContainer(VsxDataContainerHandle** dch);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDataContainer.SaveData
/// <summary>
/// Saves a VsxMessage to the given filename.
/// </summary>
/// <param name="dch">Handle to dynamic container</param>
/// <param name="tag">Specify which tag from container should be saved</param>
/// <param name="fileName">Path and filename where to save the message.</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_SaveData(VsxDataContainerHandle* dch, const char* tag, const char* fileName);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDataContainer.Save3DPointCloudData
/// <summary>
/// Saves a 3D point cloud as pcd to the given filename.
/// </summary>
/// <param name="dch">Handle to dynamic container</param>
/// <param name="point_x_Id">The x image tag name</param>
/// <param name="point_y_Id">The y image tag name</param>
/// <param name="point_z_Id">The z image tag name</param>
/// <param name="fileName">Path and filename where to save the data.</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_Save3DPointCloudData(VsxDataContainerHandle* dch, const char* point_x_Id, const char* point_y_Id, const char* point_z_Id, const char* fileName);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDataContainer.GetImage
/// <summary>
/// Get image from a dynamic container, access via raw memory pointer
/// </summary>
/// <param name="dch">Handle to dynamic container</param>
/// <param name="tag">Tag name of image data</param>
/// <param name="imageData">New handle to image object</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetImage(VsxDataContainerHandle* dch, const char* tag, VsxImage** imageData);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDataContainer.ReleaseImage
/// <summary>
/// Release / free image object
/// </summary>
/// <param name="pImage">Handle to image object</param>
/// <returns></returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_ReleaseImage(VsxImage** pImage);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDataContainer.GetLine
/// <summary>
/// Get line data from a dynamic container
/// </summary>
/// <param name="dch">Handle to dynamic container</param>
/// <param name="tag">Tag name of line data</param>
/// <param name="data">New handle to image object</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetLine(VsxDataContainerHandle* dch, const char* tag, VsxLineData** data);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDataContainer.ReleaseLine
/// <summary>
/// Release / free line data object
/// </summary>
/// <param name="pLineData">Handle to line data object</param>
/// <returns></returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_ReleaseLine(VsxLineData** pLineData);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDataContainer.GetDisparityDescriptor2
/// <summary>
/// Get disparity descriptor from a dynamic container
/// </summary>
/// <param name="dch">Handle to dynamic container</param>
/// <param name="tag">Tag name of data</param>
/// <param name="data">New handle to data object</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetDisparityDescriptor2(VsxDataContainerHandle* dch, const char* tag, VsxDisparityDescriptor2** data);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDataContainer.ReleaseDisparityDescriptor2
/// <summary>
/// Release / free DisparityDescriptor2 object
/// </summary>
/// <param name="pData">Handle to data object</param>
/// <returns></returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_ReleaseDisparityDescriptor2(VsxDisparityDescriptor2** pData);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDataContainer.GetTransformation
/// <summary>
/// Get transformation from a dynamic container
/// </summary>
/// <param name="dch">Handle to dynamic container</param>
/// <param name="tag">Tag name of data</param>
/// <param name="data">New handle to data object</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetTransformation(VsxDataContainerHandle* dch, const char* tag, VsxTransformation** data);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDataContainer.ReleaseTransformation
/// <summary>
/// Release / free Transformation object
/// </summary>
/// <param name="pData">Handle to data object</param>
/// <returns></returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_ReleaseTransformation(VsxTransformation** pData);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDataContainer.GetCaptureInformation
/// <summary>
/// Get capture information from a dynamic container
/// </summary>
/// <param name="dch">Handle to dynamic container</param>
/// <param name="tag">Tag name of data</param>
/// <param name="data">New handle to data object</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetCaptureInformation(VsxDataContainerHandle* dch, const char* tag, VsxCaptureInformation** data);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDataContainer.ReleaseCaptureInformation
/// <summary>
/// Release / free CaptureInformation object
/// </summary>
/// <param name="pData">Handle to data object</param>
/// <returns></returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_ReleaseCaptureInformation(VsxCaptureInformation** pData);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDataContainer.GetTagList
/// <summary>
/// Returns all available tags from a dynamic container
/// </summary>
/// <param name="dch">Handle to dynamic container</param>
/// <param name="tagList">New handle to tag list object</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetTagList(VsxDataContainerHandle* dch, VsxTagList** tagList);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDataContainer.ReleaseTagList
/// <summary>
/// Relase / free release tag list object
/// </summary>
/// <param name="pTagList">handle to tag list object</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_ReleaseTagList(VsxTagList** pTagList);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDataContainer.GetMissingContainerFramesCounter
/// <summary>
/// Gets the missing frame counter for image grabbing
/// </summary>
/// <param name="vsx">Handle to sensor</param>
/// <param name="result">Pointer to result value</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetMissingContainerFramesCounter(VsxSystemHandle* vsx, int32_t* result);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDataContainer.GetDynamicContainerQueueSize
/// <summary>
/// Gets the current size of the dynamic container message queue
/// </summary>
/// <param name="vsx">Handle to sensor</param>
/// <param name="result">Pointer to result value</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetDynamicContainerQueueSize(VsxSystemHandle* vsx, int32_t* result);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDataContainer.GetNumberOfCachedContainers
/// <summary>
/// Gets the current number of cached container messages
/// </summary>
/// <param name="vsx">Handle to sensor</param>
/// <param name="result">Pointer to result value</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetNumberOfCachedContainers(VsxSystemHandle* vsx, int32_t* result);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDevice.GetDeviceInformation
/// <summary>
/// Returns a device object with network informations about the current device.
/// </summary>
/// <param name="vsx">Handle to sensor</param>
/// <param name="deviceData">New handle to device data object</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetDeviceInformation(VsxSystemHandle* vsx, VsxDevice** deviceData);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDevice.ReleaseDevice
/// <summary>
/// Release / Free existing handle to device object
/// </summary>
/// <param name="pDevice">Handle to existing device obeject</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_ReleaseDevice(VsxDevice** pDevice);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDevice.GetUdpDeviceList
/// <summary>
/// Searches for all devices in a subnet via udp and returns a list with all devices found.
/// </summary>
/// <param name="deviceListData">New handle to device list object</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetUdpDeviceList(VsxDeviceList** deviceListData);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDevice.ReleaseDeviceList
/// <summary>
/// Release / Free existing handle to device list object
/// </summary>
/// <param name="pDeviceList">Handle to existing device list object</param>
/// <returns></returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_ReleaseDeviceList(VsxDeviceList** pDeviceList);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsLog.ResetLogMessageGrabber
/// <summary>
/// Starts the internal log message grabber. Saving the items will be new initialized.
/// </summary>
/// <param name="vsx">Handle to sensor</param>
/// <param name="bufferSize">The maximum number of items which will be internally saved, if less than 0, number
/// is infinity.</param>
/// <param name="typeMask">Mask which log message types will be send by device.</param>
/// <param name="strategy">The strategy, which items will be discarded if maximum number of items is reached.</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_ResetLogMessageGrabber(VsxSystemHandle* vsx, int32_t bufferSize, int32_t typeMask, VsxStrategy strategy);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsLog.GetLogMessage
/// <summary>
/// Gets the oldest saved item and removes it internally.
/// </summary>
/// <param name="vsx">Handle to sensor</param>
/// <param name="log">New handle to string list</param>
/// <param name="timeout_ms">The maximum time in ms to try reading an item.</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetLogMessage(VsxSystemHandle* vsx, const char** log, int32_t timeout_ms);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsLog.GetLogMessageQueueSize
/// <summary>
/// Gets the current size of the log message queue
/// </summary>
/// <param name="vsx">Handle to sensor</param>
/// <param name="result">Pointer to result value</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetLogMessageQueueSize(VsxSystemHandle* vsx, int32_t* result);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsLog.GetMissingLogMessagesCounter
/// <summary>
/// Gets the missing log messages counter for log message grabbing
/// </summary>
/// <param name="vsx">Handle to sensor</param>
/// <param name="result">Pointer to result value</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetMissingLogMessagesCounter(VsxSystemHandle* vsx, int32_t* result);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsParameter.SetSingleParameterValue
/// <summary>
/// Sets the parameter to a value on the device.
/// </summary>
/// <param name="vsx">Handle to sensor</param>
/// <param name="settingsVersion">The settings version of the parameter which should be set.</param>
/// <param name="configurationId">The config id of the parameter which should be set.</param>
/// <param name="configurationVersion">The config version of the parameter which should be set.</param>
/// <param name="parameterId">The id of the parameter which should be set.</param>
/// <param name="value">Value as string (floating number must be formatted with dot separation)</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_SetSingleParameterValue(VsxSystemHandle* vsx, uint32_t settingsVersion, const char* configurationId, uint32_t configurationVersion, const char* parameterId, const char* value);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsParameter.GetSingleParameterValue
/// <summary>
/// Returns the current value of the given parameter from device.
/// </summary>
/// <param name="vsx">Handle to sensor</param>
/// <param name="settingsVersion">The settings version of the parameter its value is asked for.</param>
/// <param name="configurationId">The config id of the parameter its value is asked for.</param>
/// <param name="configurationVersion">The config version of the parameter its value is asked for.</param>
/// <param name="parameterId">The id of the parameter its value is asked for.</param>
/// <param name="value">Returns value in string reprasentation</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetSingleParameterValue(VsxSystemHandle* vsx, uint32_t settingsVersion, const char* configurationId, uint32_t configurationVersion, const char* parameterId, const char** value);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsParameter.LoadDefaultParameterSetOnDevice
/// <summary>
/// Resets the devices parameters to factory settings and returns a list of the complete
/// parameter set of the device including current values.
/// </summary>
/// <param name="vsx">Handle to sensor</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_LoadDefaultParameterSetOnDevice(VsxSystemHandle* vsx);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsParameter.LoadParameterSetOnDevice
/// <summary>
/// Loads the parameter set saved on device and returns a list of the complete parameter
/// set of the device including current values.
/// </summary>
/// <param name="vsx">Handle to sensor</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_LoadParameterSetOnDevice(VsxSystemHandle* vsx);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsParameter.SaveParameterSetOnDevice
/// <summary>
/// Saves the current parameter set on device. Parameter values will be loaded when
/// device starts.
/// </summary>
/// <param name="vsx">Handle to sensor</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_SaveParameterSetOnDevice(VsxSystemHandle* vsx);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsParameter.UploadParameterSet
/// <summary>
/// Uploads a parameter file to the device.
/// </summary>
/// <param name="vsx">Handle to sensor</param>
/// <param name="fileName">Path and filename to upload.</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_UploadParameterSet(VsxSystemHandle* vsx, const char* fileName);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsParameter.DownloadParameterSet
/// <summary>
/// Save the current parameter set to a file.
/// </summary>
/// <param name="vsx">Handle to sensor</param>
/// <param name="fileName">Path and file name to save to.</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_DownloadParameterSet(VsxSystemHandle* vsx, const char* fileName);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsParameterList.GetParameterList
/// <summary>
/// Returns a list of the complete parameter set of the device including their current
/// values. The list shows the current state of the parameters.
/// </summary>
/// <param name="vsx">Handle to sensor</param>
/// <param name="parameterListData">New handle to parameter list data object</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetParameterList(VsxSystemHandle* vsx, VsxParameterList** parameterListData);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsParameterList.UploadParameterList
/// <summary>
/// Uploads a parameter list to the device.
/// </summary>
/// <param name="vsx">Handle to sensor</param>
/// <param name="parameterListData">Existing handle to parameter list data object</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_UploadParameterList(VsxSystemHandle* vsx, VsxParameterList* parameterListData);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsParameterList.SetSingleParameterString
/// <summary>
/// Sets the parameter to a value on the device.
/// </summary>
/// <param name="vsx">Handle to sensor</param>
/// <param name="parameter">The parameter the value should be set from.</param>
/// <param name="value">New value to set.</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_SetSingleParameterString(VsxSystemHandle* vsx, const VsxParameter* parameter, const char* value);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsParameterList.SetSingleParameterDouble
/// <summary>
/// Sets the parameter to a value on the device.
/// </summary>
/// <param name="vsx">Handle to sensor</param>
/// <param name="parameter">The parameter the value should be set from.</param>
/// <param name="value">New value to set.</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_SetSingleParameterDouble(VsxSystemHandle* vsx, const VsxParameter* parameter, double value);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsParameterList.SetSingleParameterInt32
/// <summary>
/// Sets the parameter to a value on the device.
/// </summary>
/// <param name="vsx">Handle to sensor</param>
/// <param name="parameter">The parameter the value should be set from.</param>
/// <param name="value">New value to set.</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_SetSingleParameterInt32(VsxSystemHandle* vsx, const VsxParameter* parameter, int32_t value);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsParameterList.GetSingleParameter
/// <summary>
/// Returns the current value of the given parameter from device.
/// </summary>
/// <param name="vsx">Handle to sensor</param>
/// <param name="parameterIn">The parameter its value is asked for</param>
/// <param name="parameterOut">The new parameter, which must be freed with 'vsx_ReleaseParameter' function</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetSingleParameter(VsxSystemHandle* vsx, const VsxParameter* parameterIn, const VsxParameter** parameterOut);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsParameterList.ReleaseParameter
/// <summary>
/// Release parameter handle
/// </summary>
/// <param name="pParameter">Handle to parameter</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_ReleaseParameter(const VsxParameter** pParameter);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsParameterList.ReleaseParameterList
/// <summary>
/// Release parameter list handle
/// </summary>
/// <param name="pParameterList">Handle to parameter list</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_ReleaseParameterList(VsxParameterList** pParameterList);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsResult.GetResultXml
/// <summary>
/// Returns the complete xml response from an result inside data container
/// </summary>
/// <param name="dch">Handle to data container</param>
/// <param name="resultId">Name of result</param>
/// <param name="result">Returns complete result xml as string</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetResultXml(VsxDataContainerHandle* dch, const char* resultId, const char** result);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsResult.GetResultElementString
/// <summary>
/// Return certain value from a result inside data container
/// </summary>
/// <param name="dch">Handle to data container</param>
/// <param name="resultId">Name of result</param>
/// <param name="xPath">xPath defintion</param>
/// <param name="result">Return result as string</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetResultElementString(VsxDataContainerHandle* dch, const char* resultId, const char* xPath, const char** result);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsResult.GetResultElementInt32
/// <summary>
/// Return certain value from a result inside data container
/// </summary>
/// <param name="dch">Handle to data container</param>
/// <param name="resultId">Name of result</param>
/// <param name="xPath">xPath defintion</param>
/// <param name="result">Return result as int32</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetResultElementInt32(VsxDataContainerHandle* dch, const char* resultId, const char* xPath, int32_t* result);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsResult.GetResultElementInt64
/// <summary>
/// Return certain value from a result inside data container
/// </summary>
/// <param name="dch">Handle to data container</param>
/// <param name="resultId">Name of result</param>
/// <param name="xPath">xPath defintion</param>
/// <param name="result">Return result as int64</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetResultElementInt64(VsxDataContainerHandle* dch, const char* resultId, const char* xPath, LOCAL_INT64_T* result);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsResult.GetResultElementDouble
/// <summary>
/// Return certain value from a result inside data container
/// </summary>
/// <param name="dch">Handle to data container</param>
/// <param name="resultId">Name of result</param>
/// <param name="xPath">xPath defintion</param>
/// <param name="result">Return result as double</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetResultElementDouble(VsxDataContainerHandle* dch, const char* resultId, const char* xPath, double* result);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsStatusItemList.GetAllDeviceStatusData
/// <summary>
/// Get the full status data set from device.
/// </summary>
/// <param name="vsx">handle to sensor</param>
/// <param name="statusItemListData">new handle to status data object</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetAllDeviceStatusData(VsxSystemHandle* vsx, VsxStatusItemList** statusItemListData);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsStatusItemList.ReleaseStatusItemList
/// <summary>
/// Release / Free "VsxStatusItemList" handle
/// </summary>
/// <param name="pStatusItemList">handle to status item object</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_ReleaseStatusItemList(VsxStatusItemList** pStatusItemList);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsStatusItemList.RegisterOnDeviceStatusReceived
/// <summary>
/// Register callback for "vsx_OnDeviceStatusReceived" callback.
/// Only short execution times are allowed (do not block the function),
/// just use to transfer data to your (main) thread.
/// </summary>
/// <param name="vsx">Handle to vsx sensor</param>
/// <param name="fptr">Function pointer to callback function</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_RegisterOnDeviceStatusReceived(VsxSystemHandle* vsx, vsx_OnDeviceStatusReceived fptr);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsStatusItemList.DeregisterOnDeviceStatusReceived
/// <summary>
/// Function to deregister already existing callback function
/// </summary>
/// <param name="vsx">Handle to sensor</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_DeregisterOnDeviceStatusReceived(VsxSystemHandle* vsx);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsStatusItemList.SubscribeToDeviceStatusData
/// <summary>
/// Subscribe status data from sensor to the client.
/// This will send regulary or in case of a problem status data to the client.
/// This need a registered callback for "vsx_OnDeviceStatusReceived".
/// </summary>
/// <param name="vsx">Handle to sensor</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_SubscribeToDeviceStatusData(VsxSystemHandle* vsx);

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsStatusItemList.UnsubscribeToDeviceStatusData
/// <summary>
/// Unsubscribe status data from sensor.
/// </summary>
/// <param name="vsx">Handle to sensor</param>
/// <returns>Returns VSX_STATUS_SUCCESS(0) on success</returns>
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_UnsubscribeToDeviceStatusData(VsxSystemHandle* vsx);

#endif // __DNNE_GENERATED_HEADER_PF_VSXPROTOCOLDRIVER_WRAPPER__

//
// Define exported functions
//
#ifdef DNNE_COMPILE_AS_SOURCE

#ifdef DNNE_WINDOWS
    #ifdef _WCHAR_T_DEFINED
        typedef wchar_t char_t;
    #else
        typedef unsigned short char_t;
    #endif
#else
    typedef char char_t;
#endif

//
// Forward declarations
//

extern void* get_callable_managed_function(
    const char_t* dotnet_type,
    const char_t* dotnet_type_method,
    const char_t* dotnet_delegate_type);

extern void* get_fast_callable_managed_function(
    const char_t* dotnet_type,
    const char_t* dotnet_type_method);

//
// String constants
//

static const char_t* t1_name = DNNE_STR("PF.VsxProtocolDriver.Wrapper.VsxExports, PF.VsxProtocolDriver.Wrapper");
static const char_t* t2_name = DNNE_STR("PF.VsxProtocolDriver.Wrapper.VsxExportsDataContainer, PF.VsxProtocolDriver.Wrapper");
static const char_t* t3_name = DNNE_STR("PF.VsxProtocolDriver.Wrapper.VsxExportsDevice, PF.VsxProtocolDriver.Wrapper");
static const char_t* t4_name = DNNE_STR("PF.VsxProtocolDriver.Wrapper.VsxExportsLog, PF.VsxProtocolDriver.Wrapper");
static const char_t* t5_name = DNNE_STR("PF.VsxProtocolDriver.Wrapper.VsxExportsParameter, PF.VsxProtocolDriver.Wrapper");
static const char_t* t6_name = DNNE_STR("PF.VsxProtocolDriver.Wrapper.VsxExportsParameterList, PF.VsxProtocolDriver.Wrapper");
static const char_t* t7_name = DNNE_STR("PF.VsxProtocolDriver.Wrapper.VsxExportsResult, PF.VsxProtocolDriver.Wrapper");
static const char_t* t8_name = DNNE_STR("PF.VsxProtocolDriver.Wrapper.VsxExportsStatusItemList, PF.VsxProtocolDriver.Wrapper");

//
// Exports
//

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.ReleaseString
static VsxStatusCode (DNNE_CALLTYPE* vsx_ReleaseString_ptr)(const char** pString);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_ReleaseString(const char** pString)
{
    if (vsx_ReleaseString_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("ReleaseString");
        vsx_ReleaseString_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(const char** pString))get_fast_callable_managed_function(t1_name, methodName);
    }
    return vsx_ReleaseString_ptr(pString);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.GetLibraryVersion
static VsxStatusCode (DNNE_CALLTYPE* vsx_GetLibraryVersion_ptr)(const char** version);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetLibraryVersion(const char** version)
{
    if (vsx_GetLibraryVersion_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("GetLibraryVersion");
        vsx_GetLibraryVersion_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(const char** version))get_fast_callable_managed_function(t1_name, methodName);
    }
    return vsx_GetLibraryVersion_ptr(version);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.GetErrorText
static VsxStatusCode (DNNE_CALLTYPE* vsx_GetErrorText_ptr)(int32_t error_code, const char** error_text);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetErrorText(int32_t error_code, const char** error_text)
{
    if (vsx_GetErrorText_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("GetErrorText");
        vsx_GetErrorText_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(int32_t error_code, const char** error_text))get_fast_callable_managed_function(t1_name, methodName);
    }
    return vsx_GetErrorText_ptr(error_code, error_text);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.InitTcpSensor
static VsxStatusCode (DNNE_CALLTYPE* vsx_InitTcpSensor_ptr)(VsxSystemHandle** pVsx, const char* ipAddress, const char* pluginName);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_InitTcpSensor(VsxSystemHandle** pVsx, const char* ipAddress, const char* pluginName)
{
    if (vsx_InitTcpSensor_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("InitTcpSensor");
        vsx_InitTcpSensor_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle** pVsx, const char* ipAddress, const char* pluginName))get_fast_callable_managed_function(t1_name, methodName);
    }
    return vsx_InitTcpSensor_ptr(pVsx, ipAddress, pluginName);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.InitSerialSensor
static VsxStatusCode (DNNE_CALLTYPE* vsx_InitSerialSensor_ptr)(VsxSystemHandle** pVsx, const char* serialPort, int32_t baudrate, const char* sensorType, VsxSerialConnectionType connectionType, const char* pluginName);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_InitSerialSensor(VsxSystemHandle** pVsx, const char* serialPort, int32_t baudrate, const char* sensorType, VsxSerialConnectionType connectionType, const char* pluginName)
{
    if (vsx_InitSerialSensor_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("InitSerialSensor");
        vsx_InitSerialSensor_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle** pVsx, const char* serialPort, int32_t baudrate, const char* sensorType, VsxSerialConnectionType connectionType, const char* pluginName))get_fast_callable_managed_function(t1_name, methodName);
    }
    return vsx_InitSerialSensor_ptr(pVsx, serialPort, baudrate, sensorType, connectionType, pluginName);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.ReleaseSensor
static VsxStatusCode (DNNE_CALLTYPE* vsx_ReleaseSensor_ptr)(VsxSystemHandle** vsx);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_ReleaseSensor(VsxSystemHandle** vsx)
{
    if (vsx_ReleaseSensor_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("ReleaseSensor");
        vsx_ReleaseSensor_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle** vsx))get_fast_callable_managed_function(t1_name, methodName);
    }
    return vsx_ReleaseSensor_ptr(vsx);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.ReConnectTcpDevice
static VsxStatusCode (DNNE_CALLTYPE* vsx_ReConnectTcpDevice_ptr)(VsxSystemHandle* vsx, const char* ipAddress);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_ReConnectTcpDevice(VsxSystemHandle* vsx, const char* ipAddress)
{
    if (vsx_ReConnectTcpDevice_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("ReConnectTcpDevice");
        vsx_ReConnectTcpDevice_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx, const char* ipAddress))get_fast_callable_managed_function(t1_name, methodName);
    }
    return vsx_ReConnectTcpDevice_ptr(vsx, ipAddress);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.ReConnectAndLoginTcpDevice
static VsxStatusCode (DNNE_CALLTYPE* vsx_ReConnectAndLoginTcpDevice_ptr)(VsxSystemHandle* vsx, const char* ipAddress, const char* username, const char* password);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_ReConnectAndLoginTcpDevice(VsxSystemHandle* vsx, const char* ipAddress, const char* username, const char* password)
{
    if (vsx_ReConnectAndLoginTcpDevice_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("ReConnectAndLoginTcpDevice");
        vsx_ReConnectAndLoginTcpDevice_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx, const char* ipAddress, const char* username, const char* password))get_fast_callable_managed_function(t1_name, methodName);
    }
    return vsx_ReConnectAndLoginTcpDevice_ptr(vsx, ipAddress, username, password);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.ReConnectSerialDevice
static VsxStatusCode (DNNE_CALLTYPE* vsx_ReConnectSerialDevice_ptr)(VsxSystemHandle* vsx, const char* serialPort, int32_t baudrate, VsxSerialConnectionType connectionType);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_ReConnectSerialDevice(VsxSystemHandle* vsx, const char* serialPort, int32_t baudrate, VsxSerialConnectionType connectionType)
{
    if (vsx_ReConnectSerialDevice_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("ReConnectSerialDevice");
        vsx_ReConnectSerialDevice_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx, const char* serialPort, int32_t baudrate, VsxSerialConnectionType connectionType))get_fast_callable_managed_function(t1_name, methodName);
    }
    return vsx_ReConnectSerialDevice_ptr(vsx, serialPort, baudrate, connectionType);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.Connect
static VsxStatusCode (DNNE_CALLTYPE* vsx_Connect_ptr)(VsxSystemHandle* vsx);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_Connect(VsxSystemHandle* vsx)
{
    if (vsx_Connect_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("Connect");
        vsx_Connect_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx))get_fast_callable_managed_function(t1_name, methodName);
    }
    return vsx_Connect_ptr(vsx);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.ConnectEx
static VsxStatusCode (DNNE_CALLTYPE* vsx_ConnectEx_ptr)(VsxSystemHandle* vsx, int32_t timeout_ms);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_ConnectEx(VsxSystemHandle* vsx, int32_t timeout_ms)
{
    if (vsx_ConnectEx_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("ConnectEx");
        vsx_ConnectEx_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx, int32_t timeout_ms))get_fast_callable_managed_function(t1_name, methodName);
    }
    return vsx_ConnectEx_ptr(vsx, timeout_ms);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.ConnectAndLogin
static VsxStatusCode (DNNE_CALLTYPE* vsx_ConnectAndLogin_ptr)(VsxSystemHandle* vsx, const char* username, const char* password);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_ConnectAndLogin(VsxSystemHandle* vsx, const char* username, const char* password)
{
    if (vsx_ConnectAndLogin_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("ConnectAndLogin");
        vsx_ConnectAndLogin_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx, const char* username, const char* password))get_fast_callable_managed_function(t1_name, methodName);
    }
    return vsx_ConnectAndLogin_ptr(vsx, username, password);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.ConnectExAndLogin
static VsxStatusCode (DNNE_CALLTYPE* vsx_ConnectExAndLogin_ptr)(VsxSystemHandle* vsx, const char* username, const char* password, int32_t timeout_ms);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_ConnectExAndLogin(VsxSystemHandle* vsx, const char* username, const char* password, int32_t timeout_ms)
{
    if (vsx_ConnectExAndLogin_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("ConnectExAndLogin");
        vsx_ConnectExAndLogin_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx, const char* username, const char* password, int32_t timeout_ms))get_fast_callable_managed_function(t1_name, methodName);
    }
    return vsx_ConnectExAndLogin_ptr(vsx, username, password, timeout_ms);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.Login
static VsxStatusCode (DNNE_CALLTYPE* vsx_Login_ptr)(VsxSystemHandle* vsx, const char* username, const char* password);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_Login(VsxSystemHandle* vsx, const char* username, const char* password)
{
    if (vsx_Login_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("Login");
        vsx_Login_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx, const char* username, const char* password))get_fast_callable_managed_function(t1_name, methodName);
    }
    return vsx_Login_ptr(vsx, username, password);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.Logout
static VsxStatusCode (DNNE_CALLTYPE* vsx_Logout_ptr)(VsxSystemHandle* vsx);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_Logout(VsxSystemHandle* vsx)
{
    if (vsx_Logout_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("Logout");
        vsx_Logout_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx))get_fast_callable_managed_function(t1_name, methodName);
    }
    return vsx_Logout_ptr(vsx);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.SetPassword
static VsxStatusCode (DNNE_CALLTYPE* vsx_SetPassword_ptr)(VsxSystemHandle* vsx, const char* authorizationUsername, const char* authorizationPassword, const char* username, const char* password);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_SetPassword(VsxSystemHandle* vsx, const char* authorizationUsername, const char* authorizationPassword, const char* username, const char* password)
{
    if (vsx_SetPassword_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("SetPassword");
        vsx_SetPassword_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx, const char* authorizationUsername, const char* authorizationPassword, const char* username, const char* password))get_fast_callable_managed_function(t1_name, methodName);
    }
    return vsx_SetPassword_ptr(vsx, authorizationUsername, authorizationPassword, username, password);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.GetConnected
static VsxStatusCode (DNNE_CALLTYPE* vsx_GetConnected_ptr)(VsxSystemHandle* vsx, int32_t* result);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetConnected(VsxSystemHandle* vsx, int32_t* result)
{
    if (vsx_GetConnected_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("GetConnected");
        vsx_GetConnected_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx, int32_t* result))get_fast_callable_managed_function(t1_name, methodName);
    }
    return vsx_GetConnected_ptr(vsx, result);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.Disconnect
static VsxStatusCode (DNNE_CALLTYPE* vsx_Disconnect_ptr)(VsxSystemHandle* vsx);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_Disconnect(VsxSystemHandle* vsx)
{
    if (vsx_Disconnect_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("Disconnect");
        vsx_Disconnect_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx))get_fast_callable_managed_function(t1_name, methodName);
    }
    return vsx_Disconnect_ptr(vsx);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.RegisterOnDisconnect
static VsxStatusCode (DNNE_CALLTYPE* vsx_RegisterOnDisconnect_ptr)(VsxSystemHandle* vsx, vsx_OnDisconnect fptr);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_RegisterOnDisconnect(VsxSystemHandle* vsx, vsx_OnDisconnect fptr)
{
    if (vsx_RegisterOnDisconnect_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("RegisterOnDisconnect");
        vsx_RegisterOnDisconnect_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx, vsx_OnDisconnect fptr))get_fast_callable_managed_function(t1_name, methodName);
    }
    return vsx_RegisterOnDisconnect_ptr(vsx, fptr);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.DeregisterOnDisconnect
static VsxStatusCode (DNNE_CALLTYPE* vsx_DeregisterOnDisconnect_ptr)(VsxSystemHandle* vsx);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_DeregisterOnDisconnect(VsxSystemHandle* vsx)
{
    if (vsx_DeregisterOnDisconnect_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("DeregisterOnDisconnect");
        vsx_DeregisterOnDisconnect_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx))get_fast_callable_managed_function(t1_name, methodName);
    }
    return vsx_DeregisterOnDisconnect_ptr(vsx);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.RegisterOnSessionMessageReceived
static VsxStatusCode (DNNE_CALLTYPE* vsx_RegisterOnSessionMessageReceived_ptr)(VsxSystemHandle* vsx, vsx_OnSessionMessageReceived fptr);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_RegisterOnSessionMessageReceived(VsxSystemHandle* vsx, vsx_OnSessionMessageReceived fptr)
{
    if (vsx_RegisterOnSessionMessageReceived_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("RegisterOnSessionMessageReceived");
        vsx_RegisterOnSessionMessageReceived_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx, vsx_OnSessionMessageReceived fptr))get_fast_callable_managed_function(t1_name, methodName);
    }
    return vsx_RegisterOnSessionMessageReceived_ptr(vsx, fptr);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.DeregisterOnSessionMessageReceived
static VsxStatusCode (DNNE_CALLTYPE* vsx_DeregisterOnSessionMessageReceived_ptr)(VsxSystemHandle* vsx);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_DeregisterOnSessionMessageReceived(VsxSystemHandle* vsx)
{
    if (vsx_DeregisterOnSessionMessageReceived_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("DeregisterOnSessionMessageReceived");
        vsx_DeregisterOnSessionMessageReceived_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx))get_fast_callable_managed_function(t1_name, methodName);
    }
    return vsx_DeregisterOnSessionMessageReceived_ptr(vsx);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.TestSystem
static VsxStatusCode (DNNE_CALLTYPE* vsx_TestSystem_ptr)(VsxSystemHandle* vsx, const char* command, const char* inputValue, const char** outputValue, int32_t* status);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_TestSystem(VsxSystemHandle* vsx, const char* command, const char* inputValue, const char** outputValue, int32_t* status)
{
    if (vsx_TestSystem_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("TestSystem");
        vsx_TestSystem_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx, const char* command, const char* inputValue, const char** outputValue, int32_t* status))get_fast_callable_managed_function(t1_name, methodName);
    }
    return vsx_TestSystem_ptr(vsx, command, inputValue, outputValue, status);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.TestSystemEx
static VsxStatusCode (DNNE_CALLTYPE* vsx_TestSystemEx_ptr)(VsxSystemHandle* vsx, const char* command, const char* inputValue, const char** outputValue, int32_t* status, int32_t timeout_ms);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_TestSystemEx(VsxSystemHandle* vsx, const char* command, const char* inputValue, const char** outputValue, int32_t* status, int32_t timeout_ms)
{
    if (vsx_TestSystemEx_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("TestSystemEx");
        vsx_TestSystemEx_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx, const char* command, const char* inputValue, const char** outputValue, int32_t* status, int32_t timeout_ms))get_fast_callable_managed_function(t1_name, methodName);
    }
    return vsx_TestSystemEx_ptr(vsx, command, inputValue, outputValue, status, timeout_ms);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.GetWaitTimeout
static VsxStatusCode (DNNE_CALLTYPE* vsx_GetWaitTimeout_ptr)(VsxSystemHandle* vsx, int32_t* timeout_ms);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetWaitTimeout(VsxSystemHandle* vsx, int32_t* timeout_ms)
{
    if (vsx_GetWaitTimeout_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("GetWaitTimeout");
        vsx_GetWaitTimeout_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx, int32_t* timeout_ms))get_fast_callable_managed_function(t1_name, methodName);
    }
    return vsx_GetWaitTimeout_ptr(vsx, timeout_ms);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.SetWaitTimeout
static VsxStatusCode (DNNE_CALLTYPE* vsx_SetWaitTimeout_ptr)(VsxSystemHandle* vsx, int32_t timeout_ms);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_SetWaitTimeout(VsxSystemHandle* vsx, int32_t timeout_ms)
{
    if (vsx_SetWaitTimeout_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("SetWaitTimeout");
        vsx_SetWaitTimeout_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx, int32_t timeout_ms))get_fast_callable_managed_function(t1_name, methodName);
    }
    return vsx_SetWaitTimeout_ptr(vsx, timeout_ms);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.UploadData
static VsxStatusCode (DNNE_CALLTYPE* vsx_UploadData_ptr)(VsxSystemHandle* vsx, const char* fileName);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_UploadData(VsxSystemHandle* vsx, const char* fileName)
{
    if (vsx_UploadData_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("UploadData");
        vsx_UploadData_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx, const char* fileName))get_fast_callable_managed_function(t1_name, methodName);
    }
    return vsx_UploadData_ptr(vsx, fileName);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.SendFirmware
static VsxStatusCode (DNNE_CALLTYPE* vsx_SendFirmware_ptr)(VsxSystemHandle* vsx, const char* fileName);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_SendFirmware(VsxSystemHandle* vsx, const char* fileName)
{
    if (vsx_SendFirmware_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("SendFirmware");
        vsx_SendFirmware_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx, const char* fileName))get_fast_callable_managed_function(t1_name, methodName);
    }
    return vsx_SendFirmware_ptr(vsx, fileName);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.SendXmlDataMessage
static VsxStatusCode (DNNE_CALLTYPE* vsx_SendXmlDataMessage_ptr)(VsxSystemHandle* vsx, const char* xmlCommand);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_SendXmlDataMessage(VsxSystemHandle* vsx, const char* xmlCommand)
{
    if (vsx_SendXmlDataMessage_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("SendXmlDataMessage");
        vsx_SendXmlDataMessage_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx, const char* xmlCommand))get_fast_callable_managed_function(t1_name, methodName);
    }
    return vsx_SendXmlDataMessage_ptr(vsx, xmlCommand);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.SetNetworkSettings
static VsxStatusCode (DNNE_CALLTYPE* vsx_SetNetworkSettings_ptr)(VsxSystemHandle* vsx, const char* ipAddress, const char* networkMask, const char* gateway);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_SetNetworkSettings(VsxSystemHandle* vsx, const char* ipAddress, const char* networkMask, const char* gateway)
{
    if (vsx_SetNetworkSettings_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("SetNetworkSettings");
        vsx_SetNetworkSettings_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx, const char* ipAddress, const char* networkMask, const char* gateway))get_fast_callable_managed_function(t1_name, methodName);
    }
    return vsx_SetNetworkSettings_ptr(vsx, ipAddress, networkMask, gateway);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExports.SetNetworkSettingsViaUdp
static VsxStatusCode (DNNE_CALLTYPE* vsx_SetNetworkSettingsViaUdp_ptr)(const char* macAddress, const char* ipAddress, const char* networkMask, const char* gateway);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_SetNetworkSettingsViaUdp(const char* macAddress, const char* ipAddress, const char* networkMask, const char* gateway)
{
    if (vsx_SetNetworkSettingsViaUdp_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("SetNetworkSettingsViaUdp");
        vsx_SetNetworkSettingsViaUdp_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(const char* macAddress, const char* ipAddress, const char* networkMask, const char* gateway))get_fast_callable_managed_function(t1_name, methodName);
    }
    return vsx_SetNetworkSettingsViaUdp_ptr(macAddress, ipAddress, networkMask, gateway);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDataContainer.ResetDynamicContainerGrabber
static VsxStatusCode (DNNE_CALLTYPE* vsx_ResetDynamicContainerGrabber_ptr)(VsxSystemHandle* vsx, int32_t bufferSize, VsxStrategy strategy);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_ResetDynamicContainerGrabber(VsxSystemHandle* vsx, int32_t bufferSize, VsxStrategy strategy)
{
    if (vsx_ResetDynamicContainerGrabber_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("ResetDynamicContainerGrabber");
        vsx_ResetDynamicContainerGrabber_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx, int32_t bufferSize, VsxStrategy strategy))get_fast_callable_managed_function(t2_name, methodName);
    }
    return vsx_ResetDynamicContainerGrabber_ptr(vsx, bufferSize, strategy);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDataContainer.GetDataContainer
static VsxStatusCode (DNNE_CALLTYPE* vsx_GetDataContainer_ptr)(VsxSystemHandle* vsx, VsxDataContainerHandle** pDch, int32_t timeout_ms);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetDataContainer(VsxSystemHandle* vsx, VsxDataContainerHandle** pDch, int32_t timeout_ms)
{
    if (vsx_GetDataContainer_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("GetDataContainer");
        vsx_GetDataContainer_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx, VsxDataContainerHandle** pDch, int32_t timeout_ms))get_fast_callable_managed_function(t2_name, methodName);
    }
    return vsx_GetDataContainer_ptr(vsx, pDch, timeout_ms);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDataContainer.GetCachedContainer
static VsxStatusCode (DNNE_CALLTYPE* vsx_GetCachedContainer_ptr)(VsxSystemHandle* vsx, VsxDataContainerHandle** pDch, int32_t position);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetCachedContainer(VsxSystemHandle* vsx, VsxDataContainerHandle** pDch, int32_t position)
{
    if (vsx_GetCachedContainer_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("GetCachedContainer");
        vsx_GetCachedContainer_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx, VsxDataContainerHandle** pDch, int32_t position))get_fast_callable_managed_function(t2_name, methodName);
    }
    return vsx_GetCachedContainer_ptr(vsx, pDch, position);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDataContainer.ReleaseDataContainer
static VsxStatusCode (DNNE_CALLTYPE* vsx_ReleaseDataContainer_ptr)(VsxDataContainerHandle** dch);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_ReleaseDataContainer(VsxDataContainerHandle** dch)
{
    if (vsx_ReleaseDataContainer_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("ReleaseDataContainer");
        vsx_ReleaseDataContainer_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxDataContainerHandle** dch))get_fast_callable_managed_function(t2_name, methodName);
    }
    return vsx_ReleaseDataContainer_ptr(dch);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDataContainer.SaveData
static VsxStatusCode (DNNE_CALLTYPE* vsx_SaveData_ptr)(VsxDataContainerHandle* dch, const char* tag, const char* fileName);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_SaveData(VsxDataContainerHandle* dch, const char* tag, const char* fileName)
{
    if (vsx_SaveData_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("SaveData");
        vsx_SaveData_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxDataContainerHandle* dch, const char* tag, const char* fileName))get_fast_callable_managed_function(t2_name, methodName);
    }
    return vsx_SaveData_ptr(dch, tag, fileName);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDataContainer.Save3DPointCloudData
static VsxStatusCode (DNNE_CALLTYPE* vsx_Save3DPointCloudData_ptr)(VsxDataContainerHandle* dch, const char* point_x_Id, const char* point_y_Id, const char* point_z_Id, const char* fileName);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_Save3DPointCloudData(VsxDataContainerHandle* dch, const char* point_x_Id, const char* point_y_Id, const char* point_z_Id, const char* fileName)
{
    if (vsx_Save3DPointCloudData_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("Save3DPointCloudData");
        vsx_Save3DPointCloudData_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxDataContainerHandle* dch, const char* point_x_Id, const char* point_y_Id, const char* point_z_Id, const char* fileName))get_fast_callable_managed_function(t2_name, methodName);
    }
    return vsx_Save3DPointCloudData_ptr(dch, point_x_Id, point_y_Id, point_z_Id, fileName);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDataContainer.GetImage
static VsxStatusCode (DNNE_CALLTYPE* vsx_GetImage_ptr)(VsxDataContainerHandle* dch, const char* tag, VsxImage** imageData);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetImage(VsxDataContainerHandle* dch, const char* tag, VsxImage** imageData)
{
    if (vsx_GetImage_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("GetImage");
        vsx_GetImage_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxDataContainerHandle* dch, const char* tag, VsxImage** imageData))get_fast_callable_managed_function(t2_name, methodName);
    }
    return vsx_GetImage_ptr(dch, tag, imageData);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDataContainer.ReleaseImage
static VsxStatusCode (DNNE_CALLTYPE* vsx_ReleaseImage_ptr)(VsxImage** pImage);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_ReleaseImage(VsxImage** pImage)
{
    if (vsx_ReleaseImage_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("ReleaseImage");
        vsx_ReleaseImage_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxImage** pImage))get_fast_callable_managed_function(t2_name, methodName);
    }
    return vsx_ReleaseImage_ptr(pImage);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDataContainer.GetLine
static VsxStatusCode (DNNE_CALLTYPE* vsx_GetLine_ptr)(VsxDataContainerHandle* dch, const char* tag, VsxLineData** data);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetLine(VsxDataContainerHandle* dch, const char* tag, VsxLineData** data)
{
    if (vsx_GetLine_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("GetLine");
        vsx_GetLine_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxDataContainerHandle* dch, const char* tag, VsxLineData** data))get_fast_callable_managed_function(t2_name, methodName);
    }
    return vsx_GetLine_ptr(dch, tag, data);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDataContainer.ReleaseLine
static VsxStatusCode (DNNE_CALLTYPE* vsx_ReleaseLine_ptr)(VsxLineData** pLineData);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_ReleaseLine(VsxLineData** pLineData)
{
    if (vsx_ReleaseLine_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("ReleaseLine");
        vsx_ReleaseLine_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxLineData** pLineData))get_fast_callable_managed_function(t2_name, methodName);
    }
    return vsx_ReleaseLine_ptr(pLineData);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDataContainer.GetDisparityDescriptor2
static VsxStatusCode (DNNE_CALLTYPE* vsx_GetDisparityDescriptor2_ptr)(VsxDataContainerHandle* dch, const char* tag, VsxDisparityDescriptor2** data);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetDisparityDescriptor2(VsxDataContainerHandle* dch, const char* tag, VsxDisparityDescriptor2** data)
{
    if (vsx_GetDisparityDescriptor2_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("GetDisparityDescriptor2");
        vsx_GetDisparityDescriptor2_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxDataContainerHandle* dch, const char* tag, VsxDisparityDescriptor2** data))get_fast_callable_managed_function(t2_name, methodName);
    }
    return vsx_GetDisparityDescriptor2_ptr(dch, tag, data);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDataContainer.ReleaseDisparityDescriptor2
static VsxStatusCode (DNNE_CALLTYPE* vsx_ReleaseDisparityDescriptor2_ptr)(VsxDisparityDescriptor2** pData);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_ReleaseDisparityDescriptor2(VsxDisparityDescriptor2** pData)
{
    if (vsx_ReleaseDisparityDescriptor2_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("ReleaseDisparityDescriptor2");
        vsx_ReleaseDisparityDescriptor2_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxDisparityDescriptor2** pData))get_fast_callable_managed_function(t2_name, methodName);
    }
    return vsx_ReleaseDisparityDescriptor2_ptr(pData);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDataContainer.GetTransformation
static VsxStatusCode (DNNE_CALLTYPE* vsx_GetTransformation_ptr)(VsxDataContainerHandle* dch, const char* tag, VsxTransformation** data);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetTransformation(VsxDataContainerHandle* dch, const char* tag, VsxTransformation** data)
{
    if (vsx_GetTransformation_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("GetTransformation");
        vsx_GetTransformation_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxDataContainerHandle* dch, const char* tag, VsxTransformation** data))get_fast_callable_managed_function(t2_name, methodName);
    }
    return vsx_GetTransformation_ptr(dch, tag, data);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDataContainer.ReleaseTransformation
static VsxStatusCode (DNNE_CALLTYPE* vsx_ReleaseTransformation_ptr)(VsxTransformation** pData);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_ReleaseTransformation(VsxTransformation** pData)
{
    if (vsx_ReleaseTransformation_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("ReleaseTransformation");
        vsx_ReleaseTransformation_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxTransformation** pData))get_fast_callable_managed_function(t2_name, methodName);
    }
    return vsx_ReleaseTransformation_ptr(pData);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDataContainer.GetCaptureInformation
static VsxStatusCode (DNNE_CALLTYPE* vsx_GetCaptureInformation_ptr)(VsxDataContainerHandle* dch, const char* tag, VsxCaptureInformation** data);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetCaptureInformation(VsxDataContainerHandle* dch, const char* tag, VsxCaptureInformation** data)
{
    if (vsx_GetCaptureInformation_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("GetCaptureInformation");
        vsx_GetCaptureInformation_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxDataContainerHandle* dch, const char* tag, VsxCaptureInformation** data))get_fast_callable_managed_function(t2_name, methodName);
    }
    return vsx_GetCaptureInformation_ptr(dch, tag, data);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDataContainer.ReleaseCaptureInformation
static VsxStatusCode (DNNE_CALLTYPE* vsx_ReleaseCaptureInformation_ptr)(VsxCaptureInformation** pData);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_ReleaseCaptureInformation(VsxCaptureInformation** pData)
{
    if (vsx_ReleaseCaptureInformation_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("ReleaseCaptureInformation");
        vsx_ReleaseCaptureInformation_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxCaptureInformation** pData))get_fast_callable_managed_function(t2_name, methodName);
    }
    return vsx_ReleaseCaptureInformation_ptr(pData);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDataContainer.GetTagList
static VsxStatusCode (DNNE_CALLTYPE* vsx_GetTagList_ptr)(VsxDataContainerHandle* dch, VsxTagList** tagList);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetTagList(VsxDataContainerHandle* dch, VsxTagList** tagList)
{
    if (vsx_GetTagList_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("GetTagList");
        vsx_GetTagList_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxDataContainerHandle* dch, VsxTagList** tagList))get_fast_callable_managed_function(t2_name, methodName);
    }
    return vsx_GetTagList_ptr(dch, tagList);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDataContainer.ReleaseTagList
static VsxStatusCode (DNNE_CALLTYPE* vsx_ReleaseTagList_ptr)(VsxTagList** pTagList);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_ReleaseTagList(VsxTagList** pTagList)
{
    if (vsx_ReleaseTagList_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("ReleaseTagList");
        vsx_ReleaseTagList_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxTagList** pTagList))get_fast_callable_managed_function(t2_name, methodName);
    }
    return vsx_ReleaseTagList_ptr(pTagList);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDataContainer.GetMissingContainerFramesCounter
static VsxStatusCode (DNNE_CALLTYPE* vsx_GetMissingContainerFramesCounter_ptr)(VsxSystemHandle* vsx, int32_t* result);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetMissingContainerFramesCounter(VsxSystemHandle* vsx, int32_t* result)
{
    if (vsx_GetMissingContainerFramesCounter_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("GetMissingContainerFramesCounter");
        vsx_GetMissingContainerFramesCounter_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx, int32_t* result))get_fast_callable_managed_function(t2_name, methodName);
    }
    return vsx_GetMissingContainerFramesCounter_ptr(vsx, result);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDataContainer.GetDynamicContainerQueueSize
static VsxStatusCode (DNNE_CALLTYPE* vsx_GetDynamicContainerQueueSize_ptr)(VsxSystemHandle* vsx, int32_t* result);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetDynamicContainerQueueSize(VsxSystemHandle* vsx, int32_t* result)
{
    if (vsx_GetDynamicContainerQueueSize_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("GetDynamicContainerQueueSize");
        vsx_GetDynamicContainerQueueSize_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx, int32_t* result))get_fast_callable_managed_function(t2_name, methodName);
    }
    return vsx_GetDynamicContainerQueueSize_ptr(vsx, result);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDataContainer.GetNumberOfCachedContainers
static VsxStatusCode (DNNE_CALLTYPE* vsx_GetNumberOfCachedContainers_ptr)(VsxSystemHandle* vsx, int32_t* result);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetNumberOfCachedContainers(VsxSystemHandle* vsx, int32_t* result)
{
    if (vsx_GetNumberOfCachedContainers_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("GetNumberOfCachedContainers");
        vsx_GetNumberOfCachedContainers_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx, int32_t* result))get_fast_callable_managed_function(t2_name, methodName);
    }
    return vsx_GetNumberOfCachedContainers_ptr(vsx, result);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDevice.GetDeviceInformation
static VsxStatusCode (DNNE_CALLTYPE* vsx_GetDeviceInformation_ptr)(VsxSystemHandle* vsx, VsxDevice** deviceData);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetDeviceInformation(VsxSystemHandle* vsx, VsxDevice** deviceData)
{
    if (vsx_GetDeviceInformation_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("GetDeviceInformation");
        vsx_GetDeviceInformation_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx, VsxDevice** deviceData))get_fast_callable_managed_function(t3_name, methodName);
    }
    return vsx_GetDeviceInformation_ptr(vsx, deviceData);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDevice.ReleaseDevice
static VsxStatusCode (DNNE_CALLTYPE* vsx_ReleaseDevice_ptr)(VsxDevice** pDevice);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_ReleaseDevice(VsxDevice** pDevice)
{
    if (vsx_ReleaseDevice_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("ReleaseDevice");
        vsx_ReleaseDevice_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxDevice** pDevice))get_fast_callable_managed_function(t3_name, methodName);
    }
    return vsx_ReleaseDevice_ptr(pDevice);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDevice.GetUdpDeviceList
static VsxStatusCode (DNNE_CALLTYPE* vsx_GetUdpDeviceList_ptr)(VsxDeviceList** deviceListData);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetUdpDeviceList(VsxDeviceList** deviceListData)
{
    if (vsx_GetUdpDeviceList_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("GetUdpDeviceList");
        vsx_GetUdpDeviceList_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxDeviceList** deviceListData))get_fast_callable_managed_function(t3_name, methodName);
    }
    return vsx_GetUdpDeviceList_ptr(deviceListData);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsDevice.ReleaseDeviceList
static VsxStatusCode (DNNE_CALLTYPE* vsx_ReleaseDeviceList_ptr)(VsxDeviceList** pDeviceList);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_ReleaseDeviceList(VsxDeviceList** pDeviceList)
{
    if (vsx_ReleaseDeviceList_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("ReleaseDeviceList");
        vsx_ReleaseDeviceList_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxDeviceList** pDeviceList))get_fast_callable_managed_function(t3_name, methodName);
    }
    return vsx_ReleaseDeviceList_ptr(pDeviceList);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsLog.ResetLogMessageGrabber
static VsxStatusCode (DNNE_CALLTYPE* vsx_ResetLogMessageGrabber_ptr)(VsxSystemHandle* vsx, int32_t bufferSize, int32_t typeMask, VsxStrategy strategy);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_ResetLogMessageGrabber(VsxSystemHandle* vsx, int32_t bufferSize, int32_t typeMask, VsxStrategy strategy)
{
    if (vsx_ResetLogMessageGrabber_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("ResetLogMessageGrabber");
        vsx_ResetLogMessageGrabber_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx, int32_t bufferSize, int32_t typeMask, VsxStrategy strategy))get_fast_callable_managed_function(t4_name, methodName);
    }
    return vsx_ResetLogMessageGrabber_ptr(vsx, bufferSize, typeMask, strategy);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsLog.GetLogMessage
static VsxStatusCode (DNNE_CALLTYPE* vsx_GetLogMessage_ptr)(VsxSystemHandle* vsx, const char** log, int32_t timeout_ms);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetLogMessage(VsxSystemHandle* vsx, const char** log, int32_t timeout_ms)
{
    if (vsx_GetLogMessage_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("GetLogMessage");
        vsx_GetLogMessage_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx, const char** log, int32_t timeout_ms))get_fast_callable_managed_function(t4_name, methodName);
    }
    return vsx_GetLogMessage_ptr(vsx, log, timeout_ms);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsLog.GetLogMessageQueueSize
static VsxStatusCode (DNNE_CALLTYPE* vsx_GetLogMessageQueueSize_ptr)(VsxSystemHandle* vsx, int32_t* result);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetLogMessageQueueSize(VsxSystemHandle* vsx, int32_t* result)
{
    if (vsx_GetLogMessageQueueSize_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("GetLogMessageQueueSize");
        vsx_GetLogMessageQueueSize_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx, int32_t* result))get_fast_callable_managed_function(t4_name, methodName);
    }
    return vsx_GetLogMessageQueueSize_ptr(vsx, result);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsLog.GetMissingLogMessagesCounter
static VsxStatusCode (DNNE_CALLTYPE* vsx_GetMissingLogMessagesCounter_ptr)(VsxSystemHandle* vsx, int32_t* result);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetMissingLogMessagesCounter(VsxSystemHandle* vsx, int32_t* result)
{
    if (vsx_GetMissingLogMessagesCounter_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("GetMissingLogMessagesCounter");
        vsx_GetMissingLogMessagesCounter_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx, int32_t* result))get_fast_callable_managed_function(t4_name, methodName);
    }
    return vsx_GetMissingLogMessagesCounter_ptr(vsx, result);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsParameter.SetSingleParameterValue
static VsxStatusCode (DNNE_CALLTYPE* vsx_SetSingleParameterValue_ptr)(VsxSystemHandle* vsx, uint32_t settingsVersion, const char* configurationId, uint32_t configurationVersion, const char* parameterId, const char* value);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_SetSingleParameterValue(VsxSystemHandle* vsx, uint32_t settingsVersion, const char* configurationId, uint32_t configurationVersion, const char* parameterId, const char* value)
{
    if (vsx_SetSingleParameterValue_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("SetSingleParameterValue");
        vsx_SetSingleParameterValue_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx, uint32_t settingsVersion, const char* configurationId, uint32_t configurationVersion, const char* parameterId, const char* value))get_fast_callable_managed_function(t5_name, methodName);
    }
    return vsx_SetSingleParameterValue_ptr(vsx, settingsVersion, configurationId, configurationVersion, parameterId, value);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsParameter.GetSingleParameterValue
static VsxStatusCode (DNNE_CALLTYPE* vsx_GetSingleParameterValue_ptr)(VsxSystemHandle* vsx, uint32_t settingsVersion, const char* configurationId, uint32_t configurationVersion, const char* parameterId, const char** value);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetSingleParameterValue(VsxSystemHandle* vsx, uint32_t settingsVersion, const char* configurationId, uint32_t configurationVersion, const char* parameterId, const char** value)
{
    if (vsx_GetSingleParameterValue_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("GetSingleParameterValue");
        vsx_GetSingleParameterValue_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx, uint32_t settingsVersion, const char* configurationId, uint32_t configurationVersion, const char* parameterId, const char** value))get_fast_callable_managed_function(t5_name, methodName);
    }
    return vsx_GetSingleParameterValue_ptr(vsx, settingsVersion, configurationId, configurationVersion, parameterId, value);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsParameter.LoadDefaultParameterSetOnDevice
static VsxStatusCode (DNNE_CALLTYPE* vsx_LoadDefaultParameterSetOnDevice_ptr)(VsxSystemHandle* vsx);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_LoadDefaultParameterSetOnDevice(VsxSystemHandle* vsx)
{
    if (vsx_LoadDefaultParameterSetOnDevice_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("LoadDefaultParameterSetOnDevice");
        vsx_LoadDefaultParameterSetOnDevice_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx))get_fast_callable_managed_function(t5_name, methodName);
    }
    return vsx_LoadDefaultParameterSetOnDevice_ptr(vsx);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsParameter.LoadParameterSetOnDevice
static VsxStatusCode (DNNE_CALLTYPE* vsx_LoadParameterSetOnDevice_ptr)(VsxSystemHandle* vsx);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_LoadParameterSetOnDevice(VsxSystemHandle* vsx)
{
    if (vsx_LoadParameterSetOnDevice_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("LoadParameterSetOnDevice");
        vsx_LoadParameterSetOnDevice_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx))get_fast_callable_managed_function(t5_name, methodName);
    }
    return vsx_LoadParameterSetOnDevice_ptr(vsx);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsParameter.SaveParameterSetOnDevice
static VsxStatusCode (DNNE_CALLTYPE* vsx_SaveParameterSetOnDevice_ptr)(VsxSystemHandle* vsx);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_SaveParameterSetOnDevice(VsxSystemHandle* vsx)
{
    if (vsx_SaveParameterSetOnDevice_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("SaveParameterSetOnDevice");
        vsx_SaveParameterSetOnDevice_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx))get_fast_callable_managed_function(t5_name, methodName);
    }
    return vsx_SaveParameterSetOnDevice_ptr(vsx);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsParameter.UploadParameterSet
static VsxStatusCode (DNNE_CALLTYPE* vsx_UploadParameterSet_ptr)(VsxSystemHandle* vsx, const char* fileName);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_UploadParameterSet(VsxSystemHandle* vsx, const char* fileName)
{
    if (vsx_UploadParameterSet_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("UploadParameterSet");
        vsx_UploadParameterSet_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx, const char* fileName))get_fast_callable_managed_function(t5_name, methodName);
    }
    return vsx_UploadParameterSet_ptr(vsx, fileName);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsParameter.DownloadParameterSet
static VsxStatusCode (DNNE_CALLTYPE* vsx_DownloadParameterSet_ptr)(VsxSystemHandle* vsx, const char* fileName);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_DownloadParameterSet(VsxSystemHandle* vsx, const char* fileName)
{
    if (vsx_DownloadParameterSet_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("DownloadParameterSet");
        vsx_DownloadParameterSet_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx, const char* fileName))get_fast_callable_managed_function(t5_name, methodName);
    }
    return vsx_DownloadParameterSet_ptr(vsx, fileName);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsParameterList.GetParameterList
static VsxStatusCode (DNNE_CALLTYPE* vsx_GetParameterList_ptr)(VsxSystemHandle* vsx, VsxParameterList** parameterListData);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetParameterList(VsxSystemHandle* vsx, VsxParameterList** parameterListData)
{
    if (vsx_GetParameterList_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("GetParameterList");
        vsx_GetParameterList_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx, VsxParameterList** parameterListData))get_fast_callable_managed_function(t6_name, methodName);
    }
    return vsx_GetParameterList_ptr(vsx, parameterListData);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsParameterList.UploadParameterList
static VsxStatusCode (DNNE_CALLTYPE* vsx_UploadParameterList_ptr)(VsxSystemHandle* vsx, VsxParameterList* parameterListData);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_UploadParameterList(VsxSystemHandle* vsx, VsxParameterList* parameterListData)
{
    if (vsx_UploadParameterList_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("UploadParameterList");
        vsx_UploadParameterList_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx, VsxParameterList* parameterListData))get_fast_callable_managed_function(t6_name, methodName);
    }
    return vsx_UploadParameterList_ptr(vsx, parameterListData);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsParameterList.SetSingleParameterString
static VsxStatusCode (DNNE_CALLTYPE* vsx_SetSingleParameterString_ptr)(VsxSystemHandle* vsx, const VsxParameter* parameter, const char* value);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_SetSingleParameterString(VsxSystemHandle* vsx, const VsxParameter* parameter, const char* value)
{
    if (vsx_SetSingleParameterString_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("SetSingleParameterString");
        vsx_SetSingleParameterString_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx, const VsxParameter* parameter, const char* value))get_fast_callable_managed_function(t6_name, methodName);
    }
    return vsx_SetSingleParameterString_ptr(vsx, parameter, value);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsParameterList.SetSingleParameterDouble
static VsxStatusCode (DNNE_CALLTYPE* vsx_SetSingleParameterDouble_ptr)(VsxSystemHandle* vsx, const VsxParameter* parameter, double value);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_SetSingleParameterDouble(VsxSystemHandle* vsx, const VsxParameter* parameter, double value)
{
    if (vsx_SetSingleParameterDouble_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("SetSingleParameterDouble");
        vsx_SetSingleParameterDouble_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx, const VsxParameter* parameter, double value))get_fast_callable_managed_function(t6_name, methodName);
    }
    return vsx_SetSingleParameterDouble_ptr(vsx, parameter, value);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsParameterList.SetSingleParameterInt32
static VsxStatusCode (DNNE_CALLTYPE* vsx_SetSingleParameterInt32_ptr)(VsxSystemHandle* vsx, const VsxParameter* parameter, int32_t value);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_SetSingleParameterInt32(VsxSystemHandle* vsx, const VsxParameter* parameter, int32_t value)
{
    if (vsx_SetSingleParameterInt32_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("SetSingleParameterInt32");
        vsx_SetSingleParameterInt32_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx, const VsxParameter* parameter, int32_t value))get_fast_callable_managed_function(t6_name, methodName);
    }
    return vsx_SetSingleParameterInt32_ptr(vsx, parameter, value);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsParameterList.GetSingleParameter
static VsxStatusCode (DNNE_CALLTYPE* vsx_GetSingleParameter_ptr)(VsxSystemHandle* vsx, const VsxParameter* parameterIn, const VsxParameter** parameterOut);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetSingleParameter(VsxSystemHandle* vsx, const VsxParameter* parameterIn, const VsxParameter** parameterOut)
{
    if (vsx_GetSingleParameter_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("GetSingleParameter");
        vsx_GetSingleParameter_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx, const VsxParameter* parameterIn, const VsxParameter** parameterOut))get_fast_callable_managed_function(t6_name, methodName);
    }
    return vsx_GetSingleParameter_ptr(vsx, parameterIn, parameterOut);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsParameterList.ReleaseParameter
static VsxStatusCode (DNNE_CALLTYPE* vsx_ReleaseParameter_ptr)(const VsxParameter** pParameter);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_ReleaseParameter(const VsxParameter** pParameter)
{
    if (vsx_ReleaseParameter_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("ReleaseParameter");
        vsx_ReleaseParameter_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(const VsxParameter** pParameter))get_fast_callable_managed_function(t6_name, methodName);
    }
    return vsx_ReleaseParameter_ptr(pParameter);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsParameterList.ReleaseParameterList
static VsxStatusCode (DNNE_CALLTYPE* vsx_ReleaseParameterList_ptr)(VsxParameterList** pParameterList);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_ReleaseParameterList(VsxParameterList** pParameterList)
{
    if (vsx_ReleaseParameterList_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("ReleaseParameterList");
        vsx_ReleaseParameterList_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxParameterList** pParameterList))get_fast_callable_managed_function(t6_name, methodName);
    }
    return vsx_ReleaseParameterList_ptr(pParameterList);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsResult.GetResultXml
static VsxStatusCode (DNNE_CALLTYPE* vsx_GetResultXml_ptr)(VsxDataContainerHandle* dch, const char* resultId, const char** result);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetResultXml(VsxDataContainerHandle* dch, const char* resultId, const char** result)
{
    if (vsx_GetResultXml_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("GetResultXml");
        vsx_GetResultXml_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxDataContainerHandle* dch, const char* resultId, const char** result))get_fast_callable_managed_function(t7_name, methodName);
    }
    return vsx_GetResultXml_ptr(dch, resultId, result);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsResult.GetResultElementString
static VsxStatusCode (DNNE_CALLTYPE* vsx_GetResultElementString_ptr)(VsxDataContainerHandle* dch, const char* resultId, const char* xPath, const char** result);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetResultElementString(VsxDataContainerHandle* dch, const char* resultId, const char* xPath, const char** result)
{
    if (vsx_GetResultElementString_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("GetResultElementString");
        vsx_GetResultElementString_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxDataContainerHandle* dch, const char* resultId, const char* xPath, const char** result))get_fast_callable_managed_function(t7_name, methodName);
    }
    return vsx_GetResultElementString_ptr(dch, resultId, xPath, result);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsResult.GetResultElementInt32
static VsxStatusCode (DNNE_CALLTYPE* vsx_GetResultElementInt32_ptr)(VsxDataContainerHandle* dch, const char* resultId, const char* xPath, int32_t* result);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetResultElementInt32(VsxDataContainerHandle* dch, const char* resultId, const char* xPath, int32_t* result)
{
    if (vsx_GetResultElementInt32_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("GetResultElementInt32");
        vsx_GetResultElementInt32_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxDataContainerHandle* dch, const char* resultId, const char* xPath, int32_t* result))get_fast_callable_managed_function(t7_name, methodName);
    }
    return vsx_GetResultElementInt32_ptr(dch, resultId, xPath, result);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsResult.GetResultElementInt64
static VsxStatusCode (DNNE_CALLTYPE* vsx_GetResultElementInt64_ptr)(VsxDataContainerHandle* dch, const char* resultId, const char* xPath, LOCAL_INT64_T* result);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetResultElementInt64(VsxDataContainerHandle* dch, const char* resultId, const char* xPath, LOCAL_INT64_T* result)
{
    if (vsx_GetResultElementInt64_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("GetResultElementInt64");
        vsx_GetResultElementInt64_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxDataContainerHandle* dch, const char* resultId, const char* xPath, LOCAL_INT64_T* result))get_fast_callable_managed_function(t7_name, methodName);
    }
    return vsx_GetResultElementInt64_ptr(dch, resultId, xPath, result);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsResult.GetResultElementDouble
static VsxStatusCode (DNNE_CALLTYPE* vsx_GetResultElementDouble_ptr)(VsxDataContainerHandle* dch, const char* resultId, const char* xPath, double* result);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetResultElementDouble(VsxDataContainerHandle* dch, const char* resultId, const char* xPath, double* result)
{
    if (vsx_GetResultElementDouble_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("GetResultElementDouble");
        vsx_GetResultElementDouble_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxDataContainerHandle* dch, const char* resultId, const char* xPath, double* result))get_fast_callable_managed_function(t7_name, methodName);
    }
    return vsx_GetResultElementDouble_ptr(dch, resultId, xPath, result);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsStatusItemList.GetAllDeviceStatusData
static VsxStatusCode (DNNE_CALLTYPE* vsx_GetAllDeviceStatusData_ptr)(VsxSystemHandle* vsx, VsxStatusItemList** statusItemListData);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_GetAllDeviceStatusData(VsxSystemHandle* vsx, VsxStatusItemList** statusItemListData)
{
    if (vsx_GetAllDeviceStatusData_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("GetAllDeviceStatusData");
        vsx_GetAllDeviceStatusData_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx, VsxStatusItemList** statusItemListData))get_fast_callable_managed_function(t8_name, methodName);
    }
    return vsx_GetAllDeviceStatusData_ptr(vsx, statusItemListData);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsStatusItemList.ReleaseStatusItemList
static VsxStatusCode (DNNE_CALLTYPE* vsx_ReleaseStatusItemList_ptr)(VsxStatusItemList** pStatusItemList);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_ReleaseStatusItemList(VsxStatusItemList** pStatusItemList)
{
    if (vsx_ReleaseStatusItemList_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("ReleaseStatusItemList");
        vsx_ReleaseStatusItemList_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxStatusItemList** pStatusItemList))get_fast_callable_managed_function(t8_name, methodName);
    }
    return vsx_ReleaseStatusItemList_ptr(pStatusItemList);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsStatusItemList.RegisterOnDeviceStatusReceived
static VsxStatusCode (DNNE_CALLTYPE* vsx_RegisterOnDeviceStatusReceived_ptr)(VsxSystemHandle* vsx, vsx_OnDeviceStatusReceived fptr);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_RegisterOnDeviceStatusReceived(VsxSystemHandle* vsx, vsx_OnDeviceStatusReceived fptr)
{
    if (vsx_RegisterOnDeviceStatusReceived_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("RegisterOnDeviceStatusReceived");
        vsx_RegisterOnDeviceStatusReceived_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx, vsx_OnDeviceStatusReceived fptr))get_fast_callable_managed_function(t8_name, methodName);
    }
    return vsx_RegisterOnDeviceStatusReceived_ptr(vsx, fptr);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsStatusItemList.DeregisterOnDeviceStatusReceived
static VsxStatusCode (DNNE_CALLTYPE* vsx_DeregisterOnDeviceStatusReceived_ptr)(VsxSystemHandle* vsx);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_DeregisterOnDeviceStatusReceived(VsxSystemHandle* vsx)
{
    if (vsx_DeregisterOnDeviceStatusReceived_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("DeregisterOnDeviceStatusReceived");
        vsx_DeregisterOnDeviceStatusReceived_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx))get_fast_callable_managed_function(t8_name, methodName);
    }
    return vsx_DeregisterOnDeviceStatusReceived_ptr(vsx);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsStatusItemList.SubscribeToDeviceStatusData
static VsxStatusCode (DNNE_CALLTYPE* vsx_SubscribeToDeviceStatusData_ptr)(VsxSystemHandle* vsx);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_SubscribeToDeviceStatusData(VsxSystemHandle* vsx)
{
    if (vsx_SubscribeToDeviceStatusData_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("SubscribeToDeviceStatusData");
        vsx_SubscribeToDeviceStatusData_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx))get_fast_callable_managed_function(t8_name, methodName);
    }
    return vsx_SubscribeToDeviceStatusData_ptr(vsx);
}

// Computed from PF.VsxProtocolDriver.Wrapper.VsxExportsStatusItemList.UnsubscribeToDeviceStatusData
static VsxStatusCode (DNNE_CALLTYPE* vsx_UnsubscribeToDeviceStatusData_ptr)(VsxSystemHandle* vsx);
DNNE_EXTERN_C DNNE_API VsxStatusCode DNNE_CALLTYPE vsx_UnsubscribeToDeviceStatusData(VsxSystemHandle* vsx)
{
    if (vsx_UnsubscribeToDeviceStatusData_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("UnsubscribeToDeviceStatusData");
        vsx_UnsubscribeToDeviceStatusData_ptr = (VsxStatusCode(DNNE_CALLTYPE*)(VsxSystemHandle* vsx))get_fast_callable_managed_function(t8_name, methodName);
    }
    return vsx_UnsubscribeToDeviceStatusData_ptr(vsx);
}

#endif // DNNE_COMPILE_AS_SOURCE
